# Exploratory Data Analysis (EDA)

## Structure & Initial Visualizations

We decided to split our EDA into three distinct parts. Part I treats descriptive statistics, the general structure of our dataset and the distribution of the variables. Part II focuses on a univariate analysis of the features and their correlations with the target variable stroke. Part III will be dedicated to the bivariate analysis of the features and an examination of multicollinearity. For the visualizations, we opted for interactivity and chose to use plotly. Unfortunately, we were not able to implement the interactive plots in the markdown file, but we provide the code for the Shiny app below and the graphs as screenshots.

### 1. Descriptive Statistics

### 2. Univariate Analysis
First, we visualized all numerical variables in a histogram to get an overview of the distribution of the data. The histograms show that the variables `age`, `avg_glucose_level`, and `bmi` are right-skewed. The variable `bmi` has a peak around 30, which is the threshold for obesity. The variable `avg_glucose_level` has a peak around 100, which is the threshold for prediabetes. The variable `age` has a peak around 50, which is the median age of the dataset.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
# Histogram of numerical variables grouped by stroke variable
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)

# Define the UI
ui <- fluidPage(
  titlePanel("Numerical variables grouped by stroke variable"),
  sidebarLayout(
    sidebarPanel(
      # Dropdown for selecting variable
      selectInput("variable", "Select Variable:", 
                  choices = c("Age" = "age", "Average Glucose Level" = "avg_glucose_level", "BMI" = "bmi")),
      
      # Conditional panel to show the bin width slider only if "Show Standardized Data" is unchecked
      conditionalPanel(
        condition = "input.standardize == false",
        sliderInput("binwidth", "Bin Width:", min = 1, max = 10, value = 5)
      ),
      
      # Checkbox for standardized data
      checkboxInput("standardize", "Show Standardized Data", value = FALSE)
    ),
    mainPanel(
      # Display the interactive plotly histogram
      plotlyOutput("histogramPlot")
    )
  )
)

# Define the server logic
server <- function(input, output, session) {
  
  observe({
    # Change bin width to 1 if standardized data is checked
    if (input$standardize) {
      updateSliderInput(session, "binwidth", value = 1)
    } else {
      updateSliderInput(session, "binwidth", value = 5)
    }
  })
  
  output$histogramPlot <- renderPlotly({
    # Retrieve the selected variable and stroke data
    original_data <- encoded_stroke_tb[[input$variable]]
    stroke_data <- encoded_stroke_tb$stroke
    
    # Calculate mean and standard deviation for original data
    mean_val <- mean(original_data)
    sd_val <- sd(original_data)
    
    # Standardize the data if checkbox is selected
    if (input$standardize) {
      data <- scale(original_data)
      x_label <- paste("Standardized", input$variable)
      # Mean and SD lines at 0 and Â±1 for standardized data
      mean_line <- 0
      sd_lines <- c(-1, 1)
    } else {
      data <- original_data
      x_label <- input$variable
      # Use calculated mean and SD for original data
      mean_line <- mean_val
      sd_lines <- c(mean_val - sd_val, mean_val + sd_val)
    }
    
    # Combine data and stroke status into a data frame
    plot_data <- data.frame(data = data, stroke = factor(stroke_data, labels = c("No Stroke", "Stroke")))
    
    # Generate the ggplot stacked histogram with mean and SD lines
    p <- ggplot(plot_data, aes(x = data, fill = stroke)) +
      geom_histogram(binwidth = input$binwidth, color = "white", position = "stack") +
      labs(title = paste("Distribution of", x_label), x = x_label, y = "Frequency", fill = "Stroke Status") +
      geom_vline(aes(xintercept = mean_line), color = "blue", linetype = "dashed", size = 1) +
      geom_vline(aes(xintercept = sd_lines[1]), color = "red", linetype = "dotted", size = 0.8) +
      geom_vline(aes(xintercept = sd_lines[2]), color = "red", linetype = "dotted", size = 0.8)
    
    # Convert ggplot to an interactive plotly object
    ggplotly(p)
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```

For completion we also included a Violin Plot: 
### 3. Bivariate Analysis 
```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Load necessary libraries
library(shiny)
library(plotly)
library(dplyr)

# Load the data using relative path with `..` to go up levels
outlier_stroke_tb <- read.csv("../../data/outlier_stroke_tb.csv")

# Define numerical variables (adjust if there are more)
numerical_variables <- c("age", "avg_glucose_level", "bmi")

# Shiny app with separate display of the correlation coefficient
shinyApp(
  ui = fluidPage(
    selectInput("selected_variable", "Choose a Variable:", choices = numerical_variables),
    plotlyOutput("violin_plot"),
    htmlOutput("correlation_text")  # Separate output for the correlation coefficient
  ),
  server = function(input, output) {
    
    output$violin_plot <- renderPlotly({
      selected_variable <- input$selected_variable
      
      # Generate the violin plot
      plot <- plot_ly(outlier_stroke_tb, x = ~factor(stroke), y = ~as.numeric(outlier_stroke_tb[[selected_variable]]), type = "violin",
                      box = list(visible = TRUE),
                      meanline = list(visible = TRUE)) %>%
        layout(
          title = paste("Violin Plot of", selected_variable, "by Stroke"),
          xaxis = list(title = "Stroke"),
          yaxis = list(title = selected_variable)
        )
      
      plot  # Display the plot
    })
    
    # Render the correlation text below the plot
    output$correlation_text <- renderUI({
      selected_variable <- input$selected_variable
      correlation <- cor(as.numeric(outlier_stroke_tb[[selected_variable]]), as.numeric(outlier_stroke_tb$stroke), method = "pearson")
      HTML(paste("Correlation Coefficient with Stroke:", round(correlation, 2)))
    })
  }
)
```

![Age vs. Stroke](../../data/png_for_update/age.png)

![avg_glucose_level vs. Stroke](../../data/png_for_update/avg_glucose_level.png)

![bmi vs. Stroke](../../data/png_for_update/bmi.png)

The second draft of our EDA Visualization examines the distribution of the categorical variables and their relationship with the target variable in a stacked bar chart:

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

ibrary(plotly)

# Define the UI
ui <- fluidPage(
  titlePanel("Categorical variables grouped by stroke variable"),
  sidebarLayout(
    sidebarPanel(
      # Dropdown for selecting the variable for the X-axis
      selectInput("x_variable", "Select Variable for X-Axis:",
                  choices = c("Gender" = "gender", 
                              "Ever Married" = "ever_married",
                              "Work Type" = "work_type", 
                              "Residence Type" = "Residence_type", 
                              "Smoking Status" = "smoking_status",
                              "Hypertension" = "hypertension", 
                              "Heart Disease" = "heart_disease"))
    ),
    mainPanel(
      # Display the interactive plotly histogram
      plotlyOutput("histogramPlot")
    )
  )
)

# Define the server logic
server <- function(input, output) {
  
  output$histogramPlot <- renderPlotly({
    
    # If the selected variable is continuous (e.g., age), use geom_histogram
    if (input$x_variable %in% c("age", "hypertension", "heart_disease")) {
      p <- ggplot(preprocessed_stroke_tb, aes_string(x = input$x_variable, fill = "as.factor(stroke)")) +
        geom_histogram(position = "fill", binwidth = 1) +
        labs(fill = "STROKE", y = "Ratio")
    } else {
      # If the selected variable is categorical (e.g., gender, work_type), use geom_bar
      p <- ggplot(preprocessed_stroke_tb, aes_string(x = input$x_variable, fill = "as.factor(stroke)")) +
        geom_bar(position = "fill") +
        labs(fill = "STROKE", y = "Ratio")
    }
    
    # Convert ggplot to an interactive plotly object
    ggplotly(p)
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```

## Key Findings or Patterns

The findings in our correlative analysis are up until now rather modest. None of the predictors shows a strong correlation with our target variable The strongest correlation is observed with the feature `age` (0.25), particularly in the age range of 60 to 80 years. The correlation between the other categorical features and the target variable seem to be of low effect size. But at the current stage, we can not make any definitive conclusions as the scope of interpretations we can make upon our initial analysis is limited. Furthermore, regarding the categorical variables test results, we have to be cautious as we tested variables with multiple components against `stroke`, so that we cannot attribute the correlation to a specific subcategory.
