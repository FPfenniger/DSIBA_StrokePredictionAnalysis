# Exploratory Data Analysis (EDA)

## Structure & Initial Visualizations

We decided to split our EDA into three distinct parts. Part I treats descriptive statistics, the general structure of our dataset and the distribution of the variables. Part II focuses on a univariate analysis of the features and their correlations with the target variable stroke. Part III will be dedicated to the bivariate analysis of the features and an examination of multicollinearity. For the visualizations, we opted for interactivity and chose to use plotly. Unfortunately, we were not able to implement the interactive plots in the markdown file, but we provide the code for the Shiny app below and the graphs as screenshots.

### 1. Descriptive Statistics

We started our EDA with a summary of the numerical and categorical variables in our dataset. The summary includes the count, mean, standard deviation, minimum, 1st quartile, median, 3rd quartile, and maximum values for numerical variables.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Generate summary of selected numerical variables
summary_table <- summary(preprocessed_stroke_tb[, c("age", "avg_glucose_level", "bmi")])

# Convert the summary to a data frame & display it with kable
summary_table <- as.data.frame.matrix(summary_table)
knitr::kable(summary_table, caption = "Summary of numerical Variables", row.names = FALSE)
```

For categorical variables, we present the frequency of each category’s occurrences. We combined all categorical variables into one table for a better overview.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Summary of categorical variables

# List of categorical variables to summarize
variables_to_summarize <- c("stroke", "gender", "ever_married", "work_type", "Residence_type", "smoking_status", "hypertension", "heart_disease")

# Summarize and combine all variables into one table
summary_table <- bind_rows(lapply(variables_to_summarize, function(var) {
  preprocessed_stroke_tb %>%
    group_by(.data[[var]]) %>%
    summarize(Count = n(), .groups = "drop") %>%
    rename(Type = .data[[var]]) %>%
    mutate(Variable = var, Type = as.character(Type))  # Ensure Type is character
}))

# Display the combined table with kable
knitr::kable(summary_table, caption = "Summary of Categorical Variables", row.names = FALSE)
```


### 2. Univariate Analysis

First, we visualized all numerical variables in a histogram to get an overview of the distribution of the data.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

library(plotly)
library(shiny)
# Histogram of numerical variables grouped by stroke variable

encoded_stroke_tb <- read.csv("../../data/encoded_stroke_tb.csv")

# Define the UI
ui <- fluidPage(
  titlePanel("Numerical variables grouped by stroke variable"),
  sidebarLayout(
    sidebarPanel(
      # Dropdown for selecting variable
      selectInput("variable", "Select Variable:", 
                  choices = c("Age" = "age", "Average Glucose Level" = "avg_glucose_level", "BMI" = "bmi")),
      
      # Conditional panel to show the bin width slider only if "Show Standardized Data" is unchecked
      conditionalPanel(
        condition = "input.standardize == false",
        sliderInput("binwidth", "Bin Width:", min = 1, max = 10, value = 5)
      ),
      
      # Checkbox for standardized data
      checkboxInput("standardize", "Show Standardized Data", value = FALSE)
    ),
    mainPanel(
      # Display the interactive plotly histogram
      plotlyOutput("histogramPlot")
    )
  )
)

# Define the server logic
server <- function(input, output, session) {
  
  observe({
    # Change bin width to 1 if standardized data is checked
    if (input$standardize) {
      updateSliderInput(session, "binwidth", value = 1)
    } else {
      updateSliderInput(session, "binwidth", value = 5)
    }
  })
  
  output$histogramPlot <- renderPlotly({
    # Retrieve the selected variable and stroke data
    original_data <- encoded_stroke_tb[[input$variable]]
    stroke_data <- encoded_stroke_tb$stroke
    
    # Calculate mean and standard deviation for original data
    mean_val <- mean(original_data)
    sd_val <- sd(original_data)
    
    # Standardize the data if checkbox is selected
    if (input$standardize) {
      data <- scale(original_data)
      x_label <- paste("Standardized", input$variable)
      # Mean and SD lines at 0 and ±1 for standardized data
      mean_line <- 0
      sd_lines <- c(-1, 1)
    } else {
      data <- original_data
      x_label <- input$variable
      # Use calculated mean and SD for original data
      mean_line <- mean_val
      sd_lines <- c(mean_val - sd_val, mean_val + sd_val)
    }
    
    # Combine data and stroke status into a data frame
    plot_data <- data.frame(data = data, stroke = factor(stroke_data, labels = c("No Stroke", "Stroke")))
    
    # Generate the ggplot stacked histogram with mean and SD lines
    p <- ggplot(plot_data, aes(x = data, fill = stroke)) +
      geom_histogram(binwidth = input$binwidth, color = "white", position = "stack") +
      labs(title = paste("Distribution of", x_label), x = x_label, y = "Frequency", fill = "Stroke Status") +
      geom_vline(aes(xintercept = mean_line), color = "blue", linetype = "dashed", size = 1) +
      geom_vline(aes(xintercept = sd_lines[1]), color = "red", linetype = "dotted", size = 0.8) +
      geom_vline(aes(xintercept = sd_lines[2]), color = "red", linetype = "dotted", size = 0.8)
    
    # Convert ggplot to an interactive plotly object
    ggplotly(p)
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```

![Age Histogram](../../data/png_for_update/age_1.png) 
![Average Glucose Level Histogram](../../data/png_for_update/glucose_1.png) 
![BMI Histogram](../../data/png_for_update/bmi_1.png)

For completion we also included a Violin Plot:

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Load the data using relative path with `..` to go up levels
outlier_stroke_tb <- read.csv("../../data/outlier_stroke_tb.csv")

# Define numerical variables (adjust if there are more)
numerical_variables <- c("age", "avg_glucose_level", "bmi")

# Shiny app with separate display of the correlation coefficient
shinyApp(
  ui = fluidPage(
    selectInput("selected_variable", "Choose a Variable:", choices = numerical_variables),
    plotlyOutput("violin_plot"),
    htmlOutput("correlation_text")  # Separate output for the correlation coefficient
  ),
  server = function(input, output) {
    
    output$violin_plot <- renderPlotly({
      selected_variable <- input$selected_variable
      
      # Generate the violin plot
      plot <- plot_ly(outlier_stroke_tb, x = ~factor(stroke), y = ~as.numeric(outlier_stroke_tb[[selected_variable]]), type = "violin",
                      box = list(visible = TRUE),
                      meanline = list(visible = TRUE)) %>%
        layout(
          title = paste("Violin Plot of", selected_variable, "by Stroke"),
          xaxis = list(title = "Stroke"),
          yaxis = list(title = selected_variable)
        )
      
      plot  # Display the plot
    })
    
    # Render the correlation text below the plot
    output$correlation_text <- renderUI({
      selected_variable <- input$selected_variable
      correlation <- cor(as.numeric(outlier_stroke_tb[[selected_variable]]), as.numeric(outlier_stroke_tb$stroke), method = "pearson")
      HTML(paste("Correlation Coefficient with Stroke:", round(correlation, 2)))
    })
  }
)
```

![Age Violin Plot](../../data/png_for_update/age.png)
![avg_glucose_level Violin Plot](../../data/png_for_update/avg_glucose_level.png)
![bmi Violin Plot](../../data/png_for_update/bmi.png)

Based on the table and histogram, we can observe the following characteristics of the numerical variables: 

- `age`: The dataset includes patients with ages ranging from 0.8 to 82 years, with an average age of 43.23 years and a standard deviation of 22.61 years, and with a peak around 70 years old. With increased age, the likelihood of a stroke also seems to increase siginificantly. 

- `avg_glucose_level`: Right-skewed distribution with a mean of 106.15 and a standard deviation of 45.28. The average glucose levels range from 55.12 to 271.74 mg/dL. Prediabetes and diabetes are associated with a range of 100 to 125 mg/dL and 126 mg/dL or higher, respectively. The graphic shows a bimodal distribution of average glucose levels, with stroke cases more frequent at higher glucose levels.

- `bmi`: Right-skewed distribution with a mean of 28.89 and a standard deviation of 7.85. The BMI values range from 10.3 to 97.6. BMI doesn't seem to have a strong correlation with the target variable `stroke`.

The second draft of our EDA Visualization examines the distribution of the categorical variables and their relationship with the target variable in a stacked bar chart:

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Barchart of categorical variables grouped by stroke variable


# Define the UI
ui <- fluidPage(
  titlePanel("Categorical variables grouped by stroke variable"),
  sidebarLayout(
    sidebarPanel(
      # Dropdown for selecting the variable for the X-axis
      selectInput("x_variable", "Select Variable for X-Axis:",
                  choices = c("Gender" = "gender", 
                              "Ever Married" = "ever_married",
                              "Work Type" = "work_type", 
                              "Residence Type" = "Residence_type", 
                              "Smoking Status" = "smoking_status",
                              "Hypertension" = "hypertension", 
                              "Heart Disease" = "heart_disease"))
    ),
    mainPanel(
      # Display the interactive plotly histogram
      plotlyOutput("histogramPlot")
    )
  )
)

# Define the server logic
server <- function(input, output) {
  
  output$histogramPlot <- renderPlotly({
    
    # If the selected variable is continuous (e.g., age), use geom_histogram
    if (input$x_variable %in% c("age", "hypertension", "heart_disease")) {
      p <- ggplot(preprocessed_stroke_tb, aes_string(x = input$x_variable, fill = "as.factor(stroke)")) +
        geom_histogram(position = "fill", binwidth = 1) +
        labs(fill = "STROKE", y = "Ratio")
    } else {
      # If the selected variable is categorical (e.g., gender, work_type), use geom_bar
      p <- ggplot(preprocessed_stroke_tb, aes_string(x = input$x_variable, fill = "as.factor(stroke)")) +
        geom_bar(position = "fill") +
        labs(fill = "STROKE", y = "Ratio")
    }
    
    # Convert ggplot to an interactive plotly object
    ggplotly(p)
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```

![Gender Bar Plot](../../data/png_for_update/gender.png) 
![Hypertension Bar Plot](../../data/png_for_update/hypertension.png) 
![heart_disease Bar Plot](../../data/png_for_update/heart_disease.png)

![ever_married Bar Plot](../../data/png_for_update/ever_married.png) 
![work_type Bar Plot](../../data/png_for_update/work_type.png) 
![residence_type Bar Plot](../../data/png_for_update/residence_type.png) 
![smoking_status Bar Plot](../../data/png_for_update/smoking_status.png) 

The graphic above displays the distribution of the categorical variables in relation to the target variable `stroke`. Overall, we can say that there seems to be very little correlation between these features and our target variable. The only exception is the feature `hypertension` and `heart_disease`, which seems to have a slightly higher prevalence in patients who have had a stroke. Surprisingly, the `smoking_status` doesn't seem to be a significant predictor for a stroke. The higher prevalence of strokes in individuals which formerly smoked, can probably be explained by the correlation with age. 

### 3. Bivariate Analysis

In the bivariate analysis we examined correlations between our features. We used a correlation matrix to visualize the relationships between the numerical variables and the target variable `stroke`.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
numeric_columns <- encoded_stroke_tb %>% 
  select(where(is.double))

# Calculate the correlation matrix
correlation_matrix <- cor(numeric_columns, use = "complete.obs")

# Convert the correlation matrix to a format that plotly can use
heatmap_data <- as.data.frame(as.table(correlation_matrix))

# Plot the correlation matrix as a heatmap
plot_ly(
  x = colnames(correlation_matrix),
  y = rownames(correlation_matrix),
  z = correlation_matrix,
  type = "heatmap",
  colorscale = "Viridis"  # Corrected typo
) %>%
  layout(
    title = "Correlation Matrix Heatmap",
    xaxis = list(title = "", tickangle = 45),
    yaxis = list(title = "")
  )

```
Our numerical features don't seem to be strongly correlated with each other. The strongest correlation is observed between `age` and `bmi` (0.33), which is not surprising, as BMI is often used as a measure of body fat and is known to increase with age. The correlation between the other numerical features is rather low. We can therefore safely assume independence of our numerical features

To examine associations and multicollinearity between the categorical variables, we use a chi-squared test. The chi-squared test is a statistical test used to determine whether there is a significant association between two categorical variables. To determine it's importance we additionally computed the Cramér's V for effect size (general threshold here 0.3).

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(vcd)
outlier_stroke_tb <- read.csv("../../data/outlier_stroke_tb.csv")

cat_variables = c("hypertension", 
                  "heart_disease", "ever_married", "work_type", "Residence_type", "smoking_status", "gender")

# Loop through each unique pair of categorical variables
for (index1 in 1:(length(cat_variables) - 1)) {
  var1 <- cat_variables[index1]
  
  for (index2 in (index1 + 1):length(cat_variables)) {
    var2 <- cat_variables[index2]
    
    # Create a contingency table
    contingency_table <- table(outlier_stroke_tb[[var1]], outlier_stroke_tb[[var2]])
    
    # Check if the contingency table has enough data for the chi-square test
    if (all(contingency_table > 0)) {
      # Run the chi-square test
      chi_square_result <- chisq.test(contingency_table)
      
      # Calculate Cramér's V to assess the strength of association
      cramers_v <- assocstats(contingency_table)$cramer
      
      # Display the results only if Cramér's V > 0.3 and p-value < 0.05
      if (cramers_v > 0.3 && chi_square_result$p.value < 0.05) {
        cat("Relationship between", var1, "and", var2, "\n")
        cat("Chi-square P-value:", chi_square_result$p.value, "\n")
        cat("Cramér's V:", cramers_v, "\n")
        print(contingency_table)
        cat("\n")
      }
    } else {
      cat("Skipping test for", var1, "and", var2, "due to insufficient data\n")
    }
  }
}
```

As no effect size appears to be greater than 0.3, we can safely conclude that our categorical features are sufficiently independent to use as predictors. In conclusion, multicollinearity does not appear to be present among the variables, and we can therefore proceed. We refrain from conducting a multivariate analysis, as the results from this section seem robust enough to also conclude no multicollinearity among multiple features.

## Key Findings or Patterns

The findings in our correlative analysis are up until now rather modest. None of the predictors shows a strong correlation with our target variable The strongest correlation is observed with the feature `age` (0.25), particularly in the age range of 60 to 80 years. The correlation between the other categorical features and the target variable seem to be of low effect size.

