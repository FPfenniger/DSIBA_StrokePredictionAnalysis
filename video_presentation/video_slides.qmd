---
title: "Understanding Stroke: A Data-Driven Approach"
format: revealjs
editor: visual
---

```{r, warning=FALSE}
library(naniar)
library(tidyverse)
library(caret)
library(plotly)
library(knitr)
```

```{r, warning=FALSE}
library(tidyverse)
library(plotly)
library(knitr)
library(caret)
library(vcd)
```

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
outlier_stroke_tb <- 
  read.csv("../../data/datasets/outlier_stroke_tb.csv")
balanced_stroke_tb <-
  read.csv("../../data/datasets/balanced_stroke_tb.csv")
preprocessed_stroke_tb <-
  read.csv("../../data/datasets/preprocessed_stroke_tb.csv")
```

## Stroke: A Global Health Emergency

The Problem:

```         
â€¢   15M strokes/year (WHO): 5M deaths, 5M disabilities.
â€¢   Stroke disrupts brain blood flow: caused by blockage or bleeding.
```

Project Goals:

```         
â€¢   Predict stroke risk using data.
â€¢   Analyze key factors like age, heart disease, & lifestyle.
â€¢   Visualize insights for better understanding.
```

Key Question:

What factors best predict stroke, and how can we intervene?

## Dataset Overview

Data Source

```         
    â€¢   Origin: Found on Kaggle.com. Owned and last updated in 2020 by Federico Soriano Palacios.
    â€¢   Observations: 5110
    â€¢   Features: 11
```

Key Variables

```         
    â€¢   Target Variable: stroke (0 = No, 1 = Yes)
    â€¢   Demographics: gender, age, Residence_type
    â€¢   Health Metrics: hypertension, heart_disease, avg_glucose_level, bmi
    â€¢   Lifestyle: smoking_status, work_type, ever_married
```

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Original Dataset
kable(stroke_tb)

```

## Data Transformations

Before preprocessing:

```         
Dataset is fairly clean
    â€¢   No duplicate rows.
    â€¢   Missing values in bmi and smoking_status.
```

After preprocessing:

```         
Variable Adjustments:
â€¢   Reclassified variables: bmi â†’ numerical; hypertension, heart_disease â†’ categorical.
â€¢   Removed irrelevant column: id.

Handling Missing Values:
â€¢   Replaced missing values: bmi â†’ median, smoking_status â†’ mode.

Outlier Analysis:
â€¢   Visualized outliers in age, avg_glucose_level, and bmi using boxplots.
â€¢   Outliers Identified:
â€¢   avg_glucose_level: 12.25% of dataset (627 points).
â€¢   bmi: 2.47% of dataset(126 points).
â€¢   Retained outliers for now due to potential relevance as risk factors.
```

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

variables <- c("age", "avg_glucose_level", "bmi")

# Loop through each variable and render the plots
for (var in variables) {
  p <- ggplot(preprocessed_stroke_tb, aes_string(y = var)) +
    geom_boxplot(outlier.color = "red", outlier.size = 2) +
    labs(title = paste("Boxplot of", var), y = var, x = "") 
  
  # Explicitly print the plot
  print(ggplotly(p))
}
```

```         

Categorical Variables:
â€¢   Removed infrequent categories in gender (Other) and work_type (Never_worked).
â€¢   Noted rare occurrences in heart_disease, hypertension, and stroke.
```

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
colSums(stroke_tb == "Unknown" | stroke_tb == "N/A" | stroke_tb == "")
```

## Findings and Results

### EDA: Stroke cases are more frequent at higher glucose levels and in the age range of 60 to 80 years.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(ggplot2)
library(plotly)

# Function to create the histogram as plotly object
create_histogram <- function(data, variable, stroke_variable, binwidth = 5, show_legend = FALSE) {
  # Extract the variable and stroke data
  original_data <- data[[variable]]
  stroke_data <- data[[stroke_variable]]
  
  # Calculate mean and standard deviation for reference lines
  mean_val <- mean(original_data, na.rm = TRUE)
  sd_val <- sd(original_data, na.rm = TRUE)
  
  # Combine data and stroke status into a data frame
  plot_data <- data.frame(data = original_data, stroke = factor(stroke_data, labels = c("No Stroke", "Stroke")))
  
  # Generate the ggplot object (temporary)
  p <- ggplot(plot_data, aes(x = data, fill = stroke)) +
    geom_histogram(binwidth = binwidth, color = "white", position = "stack") +
    labs(y = "Frequency", fill = "Stroke Status") +
    scale_fill_manual(values = c("No Stroke" = "#1f77b4", "Stroke" = "#ff7f0e")) +  # Set custom colors
    theme_minimal() +
    theme(axis.title.x = element_blank(), plot.title = element_text(hjust = 0.5))  # Center title
  
  # Convert to interactive Plotly plot
  p_plotly <- ggplotly(p) %>%
    layout(showlegend = show_legend)  # Set legend visibility
  
  return(p_plotly)
}

# Generate histograms for each variable separately without repeating legends
hist_age <- create_histogram(outlier_stroke_tb, "age", "stroke", binwidth = 5, show_legend = FALSE) %>%
  layout(title = "Distribution of Age", xaxis = list(title = "Age"), 
         yaxis = list(title = "Frequency"))

hist_glucose <- create_histogram(outlier_stroke_tb, "avg_glucose_level", "stroke", binwidth = 5, show_legend = FALSE) %>%
  layout(title = "Distribution of Average Glucose Level", xaxis = list(title = "Average Glucose Level"), 
         yaxis = list(title = "Frequency"))

hist_bmi <- create_histogram(outlier_stroke_tb, "bmi", "stroke", binwidth = 5, show_legend = FALSE) %>%
  layout(title = "Distribution of BMI", xaxis = list(title = "BMI"), 
         yaxis = list(title = "Frequency"))

# Combine all histograms into a single interactive plot with a main title
combined_histograms <- subplot(hist_age, hist_glucose, hist_bmi, nrows = 1, titleY = TRUE,
                               shareX = TRUE, shareY = TRUE) %>%
  layout(title = "Histograms of Numerical Variables by Stroke", showlegend = TRUE)  # Set main title with legend visible

# Display combined histogram
combined_histograms
```

###EDA: 
Weak positive relationships between age and stroke, and avg_glucose_level and stroke. No relationship between bmi and stroke.
```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(knitr)

# Calculate correlation coefficients for each variable with stroke
cor_age <- cor(as.numeric(outlier_stroke_tb$age), as.numeric(outlier_stroke_tb$stroke), method = "pearson")
cor_glucose <- cor(as.numeric(outlier_stroke_tb$avg_glucose_level), as.numeric(outlier_stroke_tb$stroke), method = "pearson")
cor_bmi <- cor(as.numeric(outlier_stroke_tb$bmi), as.numeric(outlier_stroke_tb$stroke), method = "pearson")

# Create a correlation table
correlation_table <- data.frame(
  Variable = c("Age", "Average Glucose Level", "BMI"),
  Correlation_with_Stroke = round(c(cor_age, cor_glucose, cor_bmi), 2)
)

# Display the correlation table with kable
kable(correlation_table, caption = "Correlation Coefficients with Stroke")
```

Summary of categorical variables

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
# List of categorical variables
variables_to_summarize <- c("stroke", "gender", "ever_married", "work_type", "Residence_type", "smoking_status", "hypertension", "heart_disease")

# Convert binary integer variables to factors
outlier_stroke_tb <- outlier_stroke_tb %>%
  mutate(
    stroke = as.factor(stroke),
    hypertension = as.factor(hypertension),
    heart_disease = as.factor(heart_disease)
  )

# Calculate total count for proportion calculation
total_count <- nrow(outlier_stroke_tb)

# Create summary table 
summary_table <- bind_rows(
  lapply(variables_to_summarize, function(var) {
    outlier_stroke_tb %>%
      group_by(.data[[var]]) %>%
      summarize(
        Count = n(),
        Proportion = n() / total_count,
        .groups = "drop"
      ) %>%
      rename(Type = .data[[var]]) %>%
      mutate(
        Variable = var,
        Type = as.character(Type),
        Proportion = round(Proportion * 100, 2)  
      )
  })
) %>%
  select(Variable, Type, Count, Proportion) %>%  
  arrange(Variable, Type)                        

# Display the combined table with kable
knitr::kable(summary_table, caption = "Summary of Categorical Variables with Proportion", row.names = FALSE)
```

## Model evaluation

## Conclusion

## Requirements:

Introduction: Briefly introduce your project goals and motivation.

Research Questions: What were the key research questions?

Data: Provide a high-level overview of your data sources and preprocessing.

Findings and Results: Highlight your key findings, insights, or model results.

Conclusion: Summarize your main takeaways and future potential directions.

Length: 7 minutes or less. The time limit will be strictly enforced. Content:

Tell your story well! Focus on delivering clear, concise, and engaging insights from your project. ðŸš€
