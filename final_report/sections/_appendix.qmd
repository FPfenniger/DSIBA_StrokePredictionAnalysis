---
title: "_Appendix"
format: html
editor: visual
---

# Appendix

## From Introduction section

[^1]: Grysiewicz, R. A., Thomas, K., & Pandey, D. K. (2008). Epidemiology of ischemic and hemorrhagic stroke: Incidence, prevalence, mortality, and risk factors. Neurologic Clinics, 26(4), 871-895. https://doi.org/10.1016/j.ncl.2008.07.003

[^2]: American Heart Association. “New guideline: Preventing a first stroke may be possible with screening, lifestyle changes”. https://newsroom.heart.org/news/new-guideline-preventing-a-first-stroke-may-be-possible-with-screening-lifestyle-changes

## From EDA section

### Proportion of `Stroke` by variables `gender` and `Residence_type`

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(ggplot2)
library(plotly)
library(dplyr)

# Define choices for the variable selection, including only Gender and Residence Type
x_variable_choices <- c("Gender" = "gender", 
                        "Residence Type" = "Residence_type")

# Create a filtered data frame based on all selected variables
filtered_data <- outlier_stroke_tb
# Remove "Other" for the gender variable
filtered_data <- filtered_data %>% filter(!(gender == "Other"))  # Simply check for 'Other' in gender

# Initialize an empty list to store plots
plots <- list()

# Loop through each categorical variable and create a bar chart
for (selected_variable in x_variable_choices) {
  
  # Get variable name
  variable_name <- names(x_variable_choices)[which(x_variable_choices == selected_variable)]
  
  # For categorical variables such as Gender and Residence Type
  p <- ggplot(filtered_data, aes_string(x = selected_variable, fill = "as.factor(stroke)")) +
    geom_bar(position = "fill") +
    labs(title = paste("Distribution of Stroke by", variable_name),
         fill = "STROKE", y = "Ratio") +
    scale_fill_manual(values = c("0" = "#1f77b4", "1" = "#ff7f0e"))  # Custom colors

  # Convert ggplot to an interactive plotly object and store it in the list
  plots[[variable_name]] <- ggplotly(p)
}

# Display all plots
for (plot in plots) {
  print(plot)  # You can use print to display each plot one after the other
}
```

### Histogram for variable `bmi` from balanced dataset

```{r, message=FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(ggplot2)
library(plotly)
library(dplyr)  

# Define the variable choice for BMI
selected_variable <- "bmi"  # Change to "bmi"

# Initialize an empty list to store plots
plots <- list()

# Retrieve the current selected variable and stroke data
original_data <- balanced_stroke_tb[[selected_variable]]
stroke_data <- balanced_stroke_tb$stroke

# Filter out non-finite values
filtered_data <- balanced_stroke_tb %>% 
  filter(!is.na(original_data), !is.infinite(original_data))

# Calculate mean and standard deviation
mean_val <- mean(filtered_data[[selected_variable]], na.rm = TRUE)  # Handle NA values
sd_val <- sd(filtered_data[[selected_variable]], na.rm = TRUE)      # Handle NA values

# Standardization logic (modify if you want to standardize)
standardize <- FALSE  # Change to TRUE if standardized data is needed
binwidth <- 1  # Set a default bin width for BMI; adjust as necessary

# Standardize the data if needed
if (standardize) {
  data <- scale(filtered_data[[selected_variable]])
  x_label <- paste("Standardized", selected_variable)
  mean_line <- 0
  sd_lines <- c(-1, 1)
} else {
  data <- filtered_data[[selected_variable]]
  x_label <- selected_variable
  mean_line <- mean_val
  sd_lines <- c(mean_val - sd_val, mean_val + sd_val)
}

# Combine data and stroke status into a data frame, using the filtered data
plot_data <- data.frame(data = data, stroke = factor(filtered_data$stroke, labels = c("No Stroke", "Stroke")))

# Generate the ggplot stacked histogram with mean and SD lines
p <- ggplot(plot_data, aes(x = data, fill = stroke)) +
  geom_histogram(binwidth = binwidth, color = "white", position = "stack") +
  labs(title = "Histogram of BMI by Stroke Status", 
       x = x_label, y = "Frequency", fill = "Stroke Status") +
  geom_vline(aes(xintercept = mean_line), color = "blue", linetype = "dashed", linewidth = 1) +
  geom_vline(aes(xintercept = sd_lines[1]), color = "red", linetype = "dotted", linewidth = 0.8) +
  geom_vline(aes(xintercept = sd_lines[2]), color = "red", linetype = "dotted", linewidth = 0.8) +
  scale_fill_manual(values = c("No Stroke" = "#1f77b4", "Stroke" = "#ff7f0e"))  # Set colors for stroke status

# Convert ggplot to an interactive plotly object
plotly_plot <- ggplotly(p)

# Display the plot
plotly_plot 
```

### Proportion of `Stroke` by variables `gender` and `Residence_Type` for individuals below 60 years old

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(plotly)
library(ggplot2)
library(dplyr)

# Updated list of categorical variables for the analysis
variables_to_summarize <- c("gender", "Residence_type")

# Function to create a bar chart based on the selected variable
create_bar_chart <- function(data, variable) {
  # Create a reactive data frame that filters "Other" for gender
  filtered_data <- data
  if (variable == "gender") {
    filtered_data <- filtered_data %>% filter(gender != "Other")
  }
  
  # Generate the bar plot
  p <- ggplot(filtered_data, aes_string(x = variable, fill = "as.factor(stroke)")) +
    geom_bar(position = "fill") +
    labs(fill = "STROKE", y = "Proportion", title = paste("Proportion of Stroke by", variable, "for under 60")) +
    theme_minimal() +
    scale_fill_manual(values = c("0" = "#1f77b4", "1" = "#ff7f0e")) # Custom colors

  # Convert ggplot to an interactive plotly object
  ggplotly(p)
}

# Generating and displaying individual plots
for (var in variables_to_summarize) {
  bar_plot <- create_bar_chart(under_60_data, var)
  print(bar_plot)
}
```

### Proportion of `Stroke` by `gender`, `Residence_type`, `smoking_status`, `work_type` for individuals of 60 and over years old

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(plotly)
library(ggplot2)
library(dplyr)

# Updated list of categorical variables for the analysis
variables_to_summarize <- c("gender", "Residence_type", "smoking_status", "work_type")
readable_names <- c("Gender", "Residence Type", "Smoking Status", "Work Type")

# Function to create a bar chart based on the selected variable
create_bar_chart <- function(data, variable, readable_name) {
  # Generate the bar plot
  p <- ggplot(data, aes_string(x = variable, fill = "as.factor(stroke)")) +
    geom_bar(position = "fill") +
    labs(fill = "STROKE", y = "Proportion", 
         title = paste("Proportion of Stroke by", readable_name, "For 60 and Over Years Old")) +
    theme_minimal() +
    scale_fill_manual(values = c("0" = "#1f77b4", "1" = "#ff7f0e")) # Custom colors

  # Convert ggplot to an interactive plotly object
  ggplotly(p)
}

# Generating and displaying individual plots for individuals over 60
for (i in seq_along(variables_to_summarize)) {
  var <- variables_to_summarize[i]
  readable_name <- readable_names[i]  # Get the corresponding readable name
  bar_plot <- create_bar_chart(over_60_data, var, readable_name)
  print(bar_plot)
}
```
