---
title: "_eda"
format: html
---
# Exploratory Data Analysis

```{r, warning=FALSE}
library(tidyverse)
library(plotly)
library(knitr)
library(caret)
library(vcd)
```

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
outlier_stroke_tb <- 
  read.csv("../../data/datasets/outlier_stroke_tb.csv")
balanced_stroke_tb <-
  read.csv("../../data/datasets/balanced_stroke_tb.csv")
preprocessed_stroke_tb <-
  read.csv("../../data/datasets/preprocessed_stroke_tb.csv")
```

## Descriptive Statistics

We start our EDA with a summary of the numerical and categorical variables in our dataset. The summary includes the count, mean, standard deviation, minimum, 1st quartile, median, 3rd quartile, and maximum values for numerical variables.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
# Generate summary of selected numerical variables
summary_table <- summary(outlier_stroke_tb[, c("age", "avg_glucose_level", "bmi")])

# Convert the summary to a data frame & display it with kable
summary_table <- as.data.frame.matrix(summary_table)
knitr::kable(summary_table, caption = "Summary of Numerical Variables", row.names = FALSE)
```

For the categorical variables, we present the total number and proportion of each categoryâ€™s occurrences. We combined all categorical variables into one table for a better overview.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
# List of categorical variables
variables_to_summarize <- c("stroke", "gender", "ever_married", "work_type", "Residence_type", "smoking_status", "hypertension", "heart_disease")

# Convert binary integer variables to factors
outlier_stroke_tb <- outlier_stroke_tb %>%
  mutate(
    stroke = as.factor(stroke),
    hypertension = as.factor(hypertension),
    heart_disease = as.factor(heart_disease)
  )

# Calculate total count for proportion calculation
total_count <- nrow(outlier_stroke_tb)

# Create summary table 
summary_table <- bind_rows(
  lapply(variables_to_summarize, function(var) {
    outlier_stroke_tb %>%
      group_by(.data[[var]]) %>%
      summarize(
        Count = n(),
        Proportion = n() / total_count,
        .groups = "drop"
      ) %>%
      rename(Type = .data[[var]]) %>%
      mutate(
        Variable = var,
        Type = as.character(Type),
        Proportion = round(Proportion * 100, 2)  
      )
  })
) %>%
  select(Variable, Type, Count, Proportion) %>%  
  arrange(Variable, Type)                        

# Display the combined table with kable
knitr::kable(summary_table, caption = "Summary of Categorical Variables with Proportion", row.names = FALSE)
```

## Univariate Analysis

### Numerical variables

First, we visualized all numerical variables in a histogram grouped by stroke occurrence to get an overview of the distribution of the data and their relationship with the target variable.
```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(ggplot2)
library(plotly)

# Function to create the histogram as plotly object
create_histogram <- function(data, variable, stroke_variable, binwidth = 5, show_legend = FALSE) {
  # Extract the variable and stroke data
  original_data <- data[[variable]]
  stroke_data <- data[[stroke_variable]]
  
  # Calculate mean and standard deviation for reference lines
  mean_val <- mean(original_data, na.rm = TRUE)
  sd_val <- sd(original_data, na.rm = TRUE)
  
  # Combine data and stroke status into a data frame
  plot_data <- data.frame(data = original_data, stroke = factor(stroke_data, labels = c("No Stroke", "Stroke")))
  
  # Generate the ggplot object (temporary)
  p <- ggplot(plot_data, aes(x = data, fill = stroke)) +
    geom_histogram(binwidth = binwidth, color = "white", position = "stack") +
    labs(y = "Frequency", fill = "Stroke Status") +
    scale_fill_manual(values = c("No Stroke" = "#1f77b4", "Stroke" = "#ff7f0e")) +  # Set custom colors
    theme_minimal() +
    theme(axis.title.x = element_blank(), plot.title = element_text(hjust = 0.5))  # Center title
  
  # Convert to interactive Plotly plot
  p_plotly <- ggplotly(p) %>%
    layout(showlegend = show_legend)  # Set legend visibility
  
  return(p_plotly)
}

# Generate histograms for each variable separately without repeating legends
hist_age <- create_histogram(outlier_stroke_tb, "age", "stroke", binwidth = 5, show_legend = FALSE) %>%
  layout(title = "Distribution of Age", xaxis = list(title = "Age"), 
         yaxis = list(title = "Frequency"))

hist_glucose <- create_histogram(outlier_stroke_tb, "avg_glucose_level", "stroke", binwidth = 5, show_legend = FALSE) %>%
  layout(title = "Distribution of Average Glucose Level", xaxis = list(title = "Average Glucose Level"), 
         yaxis = list(title = "Frequency"))

hist_bmi <- create_histogram(outlier_stroke_tb, "bmi", "stroke", binwidth = 5, show_legend = FALSE) %>%
  layout(title = "Distribution of BMI", xaxis = list(title = "BMI"), 
         yaxis = list(title = "Frequency"))

# Combine all histograms into a single interactive plot with a main title
combined_histograms <- subplot(hist_age, hist_glucose, hist_bmi, nrows = 1, titleY = TRUE,
                               shareX = TRUE, shareY = TRUE) %>%
  layout(title = "Histograms of Numerical Variables by Stroke", showlegend = TRUE)  # Set main title with legend visible

# Display combined histogram
combined_histograms
```
Based on the summary table for numerical variables and the histogram, we can observe the following descriptive characteristics:

-   `age`: The dataset includes individuals with ages ranging from 0.08 to 82 years, with an average age of 43.23 years but a peak around 57 years, a second peak around 78 years, and a standard deviation of 22.61 years.
-   `avg_glucose_level`: We can observe a right-skewed bimodal distribution with a mean of 106.15 and a standard deviation of 45.28. The average glucose levels range from 55.12 to 271.74 mg/dL.
-   `bmi`: The histogram shows a right-skewed distribution with a mean of 28.86 and a standard deviation of 7.85. The BMI values range from 10.3 to 97.6.

For completeness we added some violin plots of the numerical variables.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Function to create a violin plot
create_violin_plot <- function(data, variable, stroke_variable) {
  # Ensure the stroke variable is a factor
  data[[stroke_variable]] <- as.factor(data[[stroke_variable]])
  
  # Generate the violin plot with a name for the trace
  plot <- plot_ly(data, x = ~get(stroke_variable), y = ~get(variable), type = "violin",
                  box = list(visible = TRUE),
                  meanline = list(visible = TRUE),
                  name = variable) %>%  # Add this line to set the name
    layout(
      title = paste("Violin Plot of", variable, "by Stroke"),
      xaxis = list(title = "Stroke"),
      yaxis = list(title = variable)
    )
  
  plot
}

# Generate individual plots
plot_age <- create_violin_plot(outlier_stroke_tb, variable = "age", stroke_variable = "stroke")
plot_glucose <- create_violin_plot(outlier_stroke_tb, variable = "avg_glucose_level", stroke_variable = "stroke")
plot_bmi <- create_violin_plot(outlier_stroke_tb, variable = "bmi", stroke_variable = "stroke")

# Combine plots into a grid layout (1 row, 3 columns)
combined_plot <- subplot(
  plot_age, plot_glucose, plot_bmi,
  nrows = 1, titleX = TRUE, titleY = TRUE
) %>%
  layout(title = "Violin Plots of Numerical Variables by Stroke")

# Display the combined plot
combined_plot
```
The histogram and violin charts have been grouped by stroke occurrence. This allows us to observe the distribution of the data for each variable in relation to the target variable `stroke`. Based on the charts, `age` and `avg_glucose_level` exhibit notable differences in the proportions of stroke cases across their value ranges. Stroke cases are more frequent at higher glucose levels and in the age range of 60 to 80 years. 

The variable `age` shows a weak positive relationship with the target variable `stroke` (correlation coefficient of 0.24). `avg_glucose_level` shows an even weaker positive relationship with the target variable (correlation coefficient of 0.13). In contrast, `bmi` and `stroke` show no relationship with a correlation coefficient of 0.04.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(knitr)

# Calculate correlation coefficients for each variable with stroke
cor_age <- cor(as.numeric(outlier_stroke_tb$age), as.numeric(outlier_stroke_tb$stroke), method = "pearson")
cor_glucose <- cor(as.numeric(outlier_stroke_tb$avg_glucose_level), as.numeric(outlier_stroke_tb$stroke), method = "pearson")
cor_bmi <- cor(as.numeric(outlier_stroke_tb$bmi), as.numeric(outlier_stroke_tb$stroke), method = "pearson")

# Create a correlation table
correlation_table <- data.frame(
  Variable = c("Age", "Average Glucose Level", "BMI"),
  Correlation_with_Stroke = round(c(cor_age, cor_glucose, cor_bmi), 2)
)

# Display the correlation table with kable
kable(correlation_table, caption = "Correlation Coefficients with Stroke")
```

### Categorical variables

The second part of our EDA examines the distribution of the categorical variables and their relationship with the target variable in a stacked bar chart:
```{r}
#| code-fold: true
#| code-summary: "Click to show code"

library(ggplot2)
library(plotly)
library(dplyr)

# Define choices for the variable selection, excluding Gender and Residence Type
x_variable_choices <- c("Ever Married" = "ever_married",
                        "Work Type" = "work_type", 
                        "Smoking Status" = "smoking_status",
                        "Hypertension" = "hypertension", 
                        "Heart Disease" = "heart_disease")

# Create a filtered data frame based on all selected variables
filtered_data <- outlier_stroke_tb
# Remove "Other" for the gender variable
filtered_data <- filtered_data %>% filter(!(gender == "Other"))  # Simply check for 'Other' in gender

# Initialize an empty list to store plots
plots <- list()

# Loop through each categorical variable and create a bar chart
for (selected_variable in x_variable_choices) {
  
  # Get variable name
  variable_name <- names(x_variable_choices)[which(x_variable_choices == selected_variable)]
  
  if (variable_name %in% c("hypertension", "heart_disease")) {
    p <- ggplot(filtered_data, aes_string(x = selected_variable, fill = "as.factor(stroke)")) +
      geom_bar(position = "fill") +
      labs(title = paste("Distribution of Stroke by", variable_name),
           fill = "STROKE", y = "Ratio") +
      scale_x_continuous(breaks = c(0, 1), labels = c("No", "Yes")) +  # Custom x-axis for binary variables
      scale_fill_manual(values = c("0" = "#1f77b4", "1" = "#ff7f0e"))  # Set colors for no stroke and stroke
  } else {
    # For other categorical variables
    p <- ggplot(filtered_data, aes_string(x = selected_variable, fill = "as.factor(stroke)")) +
      geom_bar(position = "fill") +
      labs(title = paste("Distribution of Stroke by", variable_name),
           fill = "STROKE", y = "Ratio") +
      scale_fill_manual(values = c("0" = "#1f77b4", "1" = "#ff7f0e"))  # Set colors for no stroke and stroke
  }
  
  # Convert ggplot to an interactive plotly object and store it in the list
  plots[[variable_name]] <- ggplotly(p)
}
# Display all plots
for (plot in plots) {
  print(plot)  # You can use print to display each plot one after the other
}
```

Relevant differences in the proportions of stroke cases can be observed across the levels of the following categorical variables:

-   `smoking_status`: The proportion of stroke cases is highest among individuals who formerly smoked, compared to those who never smoked or currently smoke. This relationship could be influenced by age, as individuals who formerly smoked may be older on average. Current smokers show a slightly higher proportion of stroke cases than those who never smoked.
-   `hypertension`: Individuals with hypertension have a higher proportion of stroke cases compared to those without hypertension.
-   `ever_married`: Married individuals show a higher proportion of stroke cases compared to those who have never been married. This relationship might be influenced by age, as younger individuals are less likely to be married, and the risk of stroke typically increases with age.
-   `work_type`: The proportion of stroke cases varies across work types, with private sector employees and self-employed individuals exhibiting higher proportions of stroke cases than individuals in other work categories.
-   `heart disease`: Individuals with heart disease have a higher proportion of stroke cases compared to those without heart disease.

In contrast, the following variables appear to be not relevant, as there are no differences in the proportions of stroke cases across their levels (see Appendix):

-   `gender`

-   `Residence_type`

Based on the univariate analysis, `heart_disease`, `smoking_status`, `hypertension`, `ever_married`, and `work_type` could be potential candidates for further exploration and modeling among the categorical variables. These variables exhibit notable differences in the proportions of stroke cases across their levels, suggesting they may be important predictors of stroke risk. Among the numerical variables, `age` and `avg_glucose_level` show a weak to very weak positive relationship with the target variable `stroke`, suggesting they may also be important predictors of stroke risk. These predictors may even become more relevant when examined in a balanced dataset, which our initial hypotheses would suggest. 

## Bivariate Analysis

In the bivariate analysis we examined correlations between our features. We used a correlation matrix to visualize the relationships between the numerical variables and the target variable `stroke`.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
# Select the numeric columns from your data
numeric_data <- outlier_stroke_tb[, c("age", "avg_glucose_level", "bmi")]

# Calculate the correlation matrix
correlation_matrix <- cor(numeric_data, use = "complete.obs")

# Convert the correlation matrix to a format that plotly can use (optional step)
heatmap_data <- as.data.frame(as.table(correlation_matrix))

# Plot the correlation matrix as a heatmap using plotly
plot_ly(
  x = colnames(correlation_matrix),
  y = rownames(correlation_matrix),
  z = correlation_matrix,
  type = "heatmap",
  colorscale = "Viridis"  # Corrected typo
) %>%
  layout(
    title = "Correlation Matrix Heatmap",
    xaxis = list(title = "", tickangle = 45),
    yaxis = list(title = "")
  )
```

Our numerical features don't seem to be strongly correlated with each other. The strongest correlation is observed between `age` and `bmi` (0.324), which is not surprising, as BMI is often used as a measure of body fat and is known to increase with age. The correlation between the other numerical features is rather low. We can therefore safely assume independence of our numerical features. A further examination of the categorical features for collinearity will be done in the final data preparation in the next part. 

## Balanced Dataset Analysis

### Exploration 

```{r}
#| code-fold: true
#| code-summary: "Click to show code"
# Generate summary of selected numerical variables
summary_table <- summary(balanced_stroke_tb[, c("age", "avg_glucose_level", "bmi")])

# Convert the summary to a data frame & display it with kable
summary_table <- as.data.frame.matrix(summary_table)
knitr::kable(summary_table, caption = "Summary of numerical Variables", row.names = FALSE)
```

`age` and `avg_glucose_level` have very different summary statistics. The median age in the balanced dataset increased by 14 years to 59 years, up from 45 years in the original dataset. The median average glucose level is 96,84 mg/dL, with only slight increase from 91,89 mg/dL. The median bmi stays the same as the original dataset. 

```{r}
library(ggplot2)
library(plotly)

# Define choices for the variable selection
variable_choices <- c("Age" = "age", "Average Glucose Level" = "avg_glucose_level")

# Initialize an empty list to store plots
plots <- list()

# Loop through each variable and create a histogram
for (selected_variable in variable_choices) {
  
  # Retrieve the current selected variable and stroke data
  original_data <- balanced_stroke_tb[[selected_variable]]
  stroke_data <- balanced_stroke_tb$stroke
  
  # Filter out non-finite values
  filtered_data <- balanced_stroke_tb %>% 
    filter(!is.na(original_data), !is.infinite(original_data))
  
  # Calculate mean and standard deviation
  mean_val <- mean(filtered_data[[selected_variable]], na.rm = TRUE)  # Handle NA values
  sd_val <- sd(filtered_data[[selected_variable]], na.rm = TRUE)      # Handle NA values

  # Standardization logic (modify if you want to standardize some histograms)
  standardize <- FALSE  # Change to TRUE if standardized data is needed
  binwidth <- 5  # Set a default bin width

  # Standardize the data if needed
  if (standardize) {
    data <- scale(filtered_data[[selected_variable]])
    x_label <- paste("Standardized", selected_variable)
    mean_line <- 0
    sd_lines <- c(-1, 1)
  } else {
    data <- filtered_data[[selected_variable]]
    x_label <- selected_variable
    mean_line <- mean_val
    sd_lines <- c(mean_val - sd_val, mean_val + sd_val)
  }

  # Combine data and stroke status into a data frame, using the filtered data
  plot_data <- data.frame(data = data, stroke = factor(filtered_data$stroke, labels = c("No Stroke", "Stroke")))

  # Generate the ggplot stacked histogram with mean and SD lines
  p <- ggplot(plot_data, aes(x = data, fill = stroke)) +
    geom_histogram(binwidth = binwidth, color = "white", position = "stack") +
    labs(title = paste("Histogram of", ifelse(selected_variable == "age", "Age", "Average Glucose Level"), "by Stroke Status"), 
         x = x_label, y = "Frequency", fill = "Stroke Status") +
    geom_vline(aes(xintercept = mean_line), color = "blue", linetype = "dashed", linewidth = 1) +
    geom_vline(aes(xintercept = sd_lines[1]), color = "red", linetype = "dotted", linewidth = 0.8) +
    geom_vline(aes(xintercept = sd_lines[2]), color = "red", linetype = "dotted", linewidth = 0.8) +
    scale_fill_manual(values = c("No Stroke" = "#1f77b4", "Stroke" = "#ff7f0e"))  # Set colors for stroke status

  # Convert ggplot to an interactive plotly object and store it in the list
  plots[[selected_variable]] <- ggplotly(p)
}

# Display all plots
for (plot in plots) {
  print(plot)  # Print each plot one after the other
}
```

Now incorporating the balanced dataset, the univariate analysis of categorical variables such as `heart_disease`, `smoking_status`, `hypertension`, `ever_married`, and `work_type` will be re-examined to observe differences. These variables previously showed notable disparities in the proportions of stroke cases across their levels in the original dataset, indicating their potential as predictors of stroke risk. Visualizing these variables with the balanced dataset will help identify any shifts in patterns and strengthen their relevance for further exploration and modeling.


```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(ggplot2)
library(plotly)
library(dplyr)
library(caret)

# Convert 'stroke' to a factor
outlier_stroke_tb$stroke <- as.factor(outlier_stroke_tb$stroke)

# Perform up-sampling
initial_balanced_stroke_tb <- upSample(
  x = outlier_stroke_tb[, names(outlier_stroke_tb) != "stroke"], 
  y = outlier_stroke_tb$stroke, 
  yname = "stroke"
)

# Define the choices for the x-axis variables and their readable names
x_variable_choices <- c("Ever Married" = "ever_married",
                         "Work Type" = "work_type", 
                         "Smoking Status" = "smoking_status",
                         "Hypertension" = "hypertension", 
                         "Heart Disease" = "heart_disease")

# Initialize an empty list to store plots
plots <- list()

# Create a filtered data frame based on the initial data
filtered_data <- initial_balanced_stroke_tb

# Loop through each variable to create a bar chart
for (selected_variable in names(x_variable_choices)) {
  
  variable_name <- x_variable_choices[selected_variable]  # Get the readable name
  
  # Check if filtered_data contains the variable
  if (!variable_name %in% names(filtered_data)) {
    next  # Skip this iteration if the variable is not in the data frame
  }
  
  # Check if the filtered data frame has rows to plot
  if (nrow(filtered_data) > 0) {
    # Generate the bar chart based on the selected variable
    if (variable_name %in% c("hypertension", "heart_disease")) {
      p <- ggplot(filtered_data, aes_string(x = variable_name, fill = "as.factor(stroke)")) +
        geom_bar(position = "fill") +
        labs(title = paste("Proportion of Stroke by", selected_variable), 
             fill = "STROKE", y = "Ratio") +
        scale_fill_manual(values = c("0" = "#1f77b4", "1" = "#ff7f0e")) +  # Custom colors
        scale_x_discrete(labels = c("0" = "No", "1" = "Yes"))  # Custom x-axis for binary variables
    } else {
      # For other categorical variables
      p <- ggplot(filtered_data, aes_string(x = variable_name, fill = "as.factor(stroke)")) +
        geom_bar(position = "fill") +
        labs(title = paste("Proportion of Stroke by", selected_variable), 
             fill = "STROKE", y = "Ratio") +
        scale_fill_manual(values = c("0" = "#1f77b4", "1" = "#ff7f0e"))  # Custom colors
    }
    
    # Convert ggplot to an interactive plotly object and store it in the list
    plots[[selected_variable]] <- ggplotly(p)
  } else {
    message(paste("No valid data to plot for", selected_variable))
  }
}

# Display all plots
for (plot in plots) {
  print(plot)  # Print each plot one after the other
}
```

- `ever_married`: Looking at the balanced barplots for the categorical variables, around 58% of individuals that have ever been married had experienced a stroke, while only around 25% for those who have never been. 

- `work_type`: Around 6% of individuals with a work type `children` have experienced a stroke. As the data source of the dataset does not states clearly that work type `children` means that the individual is a child, we cannot confirm that it makes sense because children experience less stroke. For the tree other categories, the proportion of individuals that have experienced a stroke is between 50% to 65%. 

- `smoking_status`: The tree categories of this variable show proportions of stroke between 40% to 65%, which suggest that the dataset is balanced as we want.  

- `hypertension`: Around 75% of individuals who have hypertension experienced a stroke, while only around 45% for those who don't have hypertension.

- `heart_disease`: Around 80% of individuals who have a heart disease had a stroke. While around 45% for those who don't. 

For the variables `hypertension` and `heart_disease`, this noticeable difference is explained by the disproportion of individuals not having hypertension (around 82.2%) and not having a heart_disease (around 87.86%).

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Load necessary libraries
library(dplyr)
library(knitr)

# Calculate the proportion of individuals with hypertension
hypertension_proportion <- initial_balanced_stroke_tb %>%
  group_by(hypertension) %>%
  summarise(count = n(), .groups = "drop") %>%
  mutate(proportion = count / sum(count)) %>%
  mutate(Condition = paste("Hypertension:", hypertension)) %>%
  select(Condition, Count = count, Proportion = proportion)

# Calculate the proportion of individuals with heart disease
heart_disease_proportion <- initial_balanced_stroke_tb %>%
  group_by(heart_disease) %>%
  summarise(count = n(), .groups = "drop") %>%
  mutate(proportion = count / sum(count)) %>%
  mutate(Condition = paste("Heart Disease:", heart_disease)) %>%
  select(Condition, Count = count, Proportion = proportion)

# Combine both results into one data frame
results <- bind_rows(
  hypertension_proportion,
  heart_disease_proportion
)

# Display the results using kable
kable(results, format = "markdown", col.names = c("Condition", "Count", "Proportion"))
```

To go deeper in the analysis of the numerical variables of the balanced dataset, we create their violinplots. This will allow us to observe the distribution of the data for each variable in relation to the target variable `stroke`

As for the violin plots of the initial datasets, stroke cases are more frequent at higher glucose levels and in the age range of 60 to 80 years. The proportions of stroke cases vary significantly across the different value ranges of age and avg_glucose_level.

The balancing indicate more pronounced relationships between these variables and stroke occurrences. The strong positive correlation between age and stroke, which increased to 0.58 from 0.24, suggests that as age rises, so does the likelihood of experiencing a stroke. This enhancement may stem from balancing the dataset, which equalized the number of individuals with strokes and those without, thereby reducing biases caused by an uneven distribution across age groups and clarifying the association. Similarly, the correlation between average glucose levels and stroke strengthened to 0.26, up from 0.13, potentially highlighting a clearer link between higher glucose levels and stroke risk. Lastly, the correlation for `bmi` rose slightly to 0.09 from 0.04. 

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(knitr)

# Calculate correlation coefficients for each variable
cor_age <- cor(as.numeric(initial_balanced_stroke_tb$age), as.numeric(initial_balanced_stroke_tb$stroke), method = "pearson")
cor_glucose <- cor(as.numeric(initial_balanced_stroke_tb$avg_glucose_level), as.numeric(initial_balanced_stroke_tb$stroke), method = "pearson")
cor_bmi <- cor(as.numeric(initial_balanced_stroke_tb$bmi), as.numeric(initial_balanced_stroke_tb$stroke), method = "pearson")

# Create a correlation table
correlation_table <- data.frame(
  Variable = c("Age", "Average Glucose Level", "BMI"),
  Correlation_with_Stroke = round(c(cor_age, cor_glucose, cor_bmi), 2)
)

# Display the correlation table with kable
kable(correlation_table)
```

## Stratified Dataset Analysis

In our previous EDA we observed that `age` is the strongest predictor for `stroke`. To ensure that our model is not biased towards the age distribution in the dataset, we will perform stratified sampling based on the age variable. We will create two age groups (one group composed of individuals below 60, the other one composed of individuals of 60 and over) and ensure that the distribution of these groups is similar in both the training and test datasets. 

The decision to use 60 years as the cutoff is clinically significant for several reasons. Research indicates that the risk of stroke markedly increases with age, particularly after 60, meaning that this age threshold allows us to focus our analysis on populations that are most affected by this condition. Furthermore, individuals over 60 often experience biological changes that can influence stroke risk factors, such as increased incidence of hypertension, changes in blood vessel elasticity, and the onset of other comorbidities. By stratifying at this age, we can capture these critical differences in risk profiles, leading to more precise analysis

Looking at the violin plot for individuals that have experienced a stroke, the average age  is 67.73 years. We have arbitrarily chosen to divide the dataset into two age groups at age 60 for several reasons. 

With this sampling method, we hope to increase our model's generalizability and robustness in the section.

```{r}
#| code-fold: true
#| code-summary: "Click to show code"
# Load necessary library
library(knitr)

# Create dataset for individuals under 60 years old
under_60_data <- outlier_stroke_tb[outlier_stroke_tb$age < 60, ]

# Create dataset for individuals aged 60 years and older
over_60_data <- outlier_stroke_tb[outlier_stroke_tb$age >= 60, ]

# Display the first few rows of each dataset using kable
# For individuals under 60
kable(head(under_60_data), caption = "Individuals Under 60 Years")

# For individuals aged 60 and older
kable(head(over_60_data), caption = "Individuals Aged 60 and Older")
```

### Exploration
We perform an Exploratory Data Analysis on two distinct age groups: individuals under 60 years old and those of 60 years old and over. This analysis aims to uncover valuable insights regarding stroke occurrences, risk factors, and demographic characteristics within each group.

#### Low-Risk Age Group
To begin our analysis, we focus first on the group of individuals under 60 years old. 
```{r, message=FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(dplyr)
library(knitr)

# Generate summary of selected numerical variables for the under 60 group
summary_under_60_data <- summary(under_60_data[, c("age", "avg_glucose_level", "bmi")])

# Convert the summary to a data frame & display it with kable
summary_table_under_60 <- as.data.frame.matrix(summary_under_60_data)
knitr::kable(summary_table_under_60, caption = "Summary of Numerical Variables (Individuals Under 60 Years Old)", row.names = FALSE)
```

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(dplyr)
library(knitr)

# List of categorical variables to summarize for individuals under 60
variables_to_summarize <- c("stroke", "gender", "ever_married", 
                             "work_type", "Residence_type", 
                             "smoking_status", "hypertension", 
                             "heart_disease")

# Convert binary integer variables to factors in the under_60_data dataset
under_60_data <- under_60_data %>%
  mutate(
    stroke = as.factor(stroke),
    hypertension = as.factor(hypertension),
    heart_disease = as.factor(heart_disease)
  )

# Calculate total count for proportion calculation
total_count_under_60 <- nrow(under_60_data)

# Create summary table for individuals under 60
summary_table_under_60 <- bind_rows(
  lapply(variables_to_summarize, function(var) {
    under_60_data %>%
      group_by(!!sym(var)) %>%
      summarize(
        Count = n(),
        Proportion = n() / total_count_under_60,
        .groups = "drop"
      ) %>%
      rename(Type = !!sym(var)) %>%
      mutate(
        Variable = var,
        Type = as.character(Type),
        Proportion = round(Proportion * 100, 2)  
      )
  })
) %>%
  select(Variable, Type, Count, Proportion) %>%  
  arrange(Variable, Type)                        

# Display the combined table with kable
knitr::kable(summary_table_under_60, caption = "Summary of Categorical Variables with Proportions (Individuals Under 60 Years Old)", row.names = FALSE)
```

Same as for the whole group EDA, we visualized all numerical variables in a histogram grouped by stroke occurrence to get an overview of the distribution of the data and their relationship with the target variable.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(plotly)
library(ggplot2)
library(dplyr)

# Function to create the histogram
create_histogram <- function(data, variable, stroke_variable, binwidth = 5, show_legend = FALSE) {
  # Extract the variable and stroke data
  original_data <- data[[variable]]
  stroke_data <- data[[stroke_variable]]
  
  # Calculate mean and standard deviation for reference lines
  mean_val <- mean(original_data, na.rm = TRUE)
  sd_val <- sd(original_data, na.rm = TRUE)
  mean_line <- mean_val
  sd_lines <- c(mean_val - sd_val, mean_val + sd_val)
  
  # Combine data and stroke status into a data frame
  plot_data <- data.frame(data = original_data, stroke = factor(stroke_data, labels = c("No Stroke", "Stroke")))
  
  # Generate the ggplot stacked histogram with mean and SD lines
  p <- ggplot(plot_data, aes(x = data, fill = stroke)) +
    geom_histogram(binwidth = binwidth, color = "white", position = "stack") +
    labs(title = paste("Distribution of", variable), 
         x = variable,  # Variable name will be customized below
         y = "Frequency", 
         fill = "Stroke Status") +
    geom_vline(xintercept = mean_line, color = "blue", linetype = "dashed", linewidth = 1) +
    geom_vline(xintercept = sd_lines[1], color = "red", linetype = "dotted", linewidth = 0.8) +
    geom_vline(xintercept = sd_lines[2], color = "red", linetype = "dotted", linewidth = 0.8) +
    scale_fill_manual(values = c("No Stroke" = "#1f77b4", "Stroke" = "#ff7f0e")) +  # Custom colors
    theme_minimal()
  
  # Set x-axis label according to the variable
  if(variable == "avg_glucose_level") {
    p <- p + labs(x = "Average Glucose Level")
  } else if(variable == "age") {
    p <- p + labs(x = "Age")
  } else if(variable == "bmi") {
    p <- p + labs(x = "BMI")
  }
  
  # Convert to interactive Plotly plot
  ggplotly(p) %>%
    layout(showlegend = show_legend) # Control legend visibility
}

# Generate histograms for individuals under 60
hist_age <- create_histogram(under_60_data, "age", "stroke", binwidth = 5, show_legend = TRUE)
hist_glucose <- create_histogram(under_60_data, "avg_glucose_level", "stroke", binwidth = 5, show_legend = FALSE)
hist_bmi <- create_histogram(under_60_data, "bmi", "stroke", binwidth = 5, show_legend = FALSE)

# Combine histograms into a grid layout (1 row)
combined_histograms <- subplot(
  hist_age, hist_glucose, hist_bmi,
  nrows = 1, titleX = TRUE, titleY = TRUE
) %>%
  layout(
    title = "Histograms of Numerical Variables by Stroke Status (Individuals Under 60 Years Old)",
    showlegend = TRUE  # Ensure unified legend is displayed
  )

# Display the combined histograms
combined_histograms
```
Looking at the numerical variables summary and at the histograms for individuals below 60 years old, we find that: 

- `age`: The dataset includes individuals with ages ranging from 0.08 to 59 years, with an average age of 33.13 years (versus 43.35 years old for the full dataset). The median decrease to 35 years old (versus 45 years old for the full dataset). This is a 10 years decrease for the median ! 

- `avg_glucose_level`: The histogram of this variable still shows a right-skewed bimodal distribution. The mean of average glucose level slightly decrease to 100.36 mg/dL (versus 106.18 mg/dL) and the same goes for the median, which drops to 90.39 mg/dL (versus 91.89 mg/dL). 

- `bmi`: The histogram shows a right-skewed distribution. The mean of 28.52 exhibits minimal fluctuation (versus 28.88), the same applies to the median of 27.70 (versus 28.10). 

Same as for the balanced dataset analysis, we create some violin plots for the numerical variables to get a better view of these variables.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(plotly)

# Function to create a violin plot
create_violin_plot <- function(data, variable, stroke_variable) {
  # Ensure the stroke variable is a factor
  data[[stroke_variable]] <- as.factor(data[[stroke_variable]])
  
  # Generate the violin plot
  plot <- plot_ly(data, x = ~get(stroke_variable), y = ~get(variable), type = "violin",
                  box = list(visible = TRUE),
                  meanline = list(visible = TRUE),
                  name = variable) %>%  # Add the variable name here
    layout(
      title = paste("Violin Plot of", variable, "by Stroke (Individuals Under 60)"),
      xaxis = list(title = "Stroke"),
      yaxis = list(title = variable)
    )
  
  plot
}

# Generate individual plots for individuals under 60
plot_age <- create_violin_plot(under_60_data, variable = "age", stroke_variable = "stroke")
plot_glucose <- create_violin_plot(under_60_data, variable = "avg_glucose_level", stroke_variable = "stroke")
plot_bmi <- create_violin_plot(under_60_data, variable = "bmi", stroke_variable = "stroke")

# Combine plots into a grid layout (1 row, 3 columns)
combined_plot <- subplot(
  plot_age, plot_glucose, plot_bmi,
  nrows = 1, titleX = TRUE, titleY = TRUE
) %>%
  layout(title = "Violin Plots of Numerical Variables by Stroke (Individuals Under 60 Years Old)")

# Display the combined plot
combined_plot
```

The proportions of stroke cases vary significantly across the different value ranges of `age`. Individuals between 50 and 60 years old seem to experience stroke significantly more. 

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(knitr)

# Calculate correlation coefficients for each variable
cor_age <- cor(as.numeric(under_60_data$age), as.numeric(under_60_data$stroke), method = "pearson")
cor_glucose <- cor(as.numeric(under_60_data$avg_glucose_level), as.numeric(under_60_data$stroke), method = "pearson")
cor_bmi <- cor(as.numeric(under_60_data$bmi), as.numeric(under_60_data$stroke), method = "pearson")

# Create a correlation table
correlation_table <- data.frame(
  Variable = c("Age", "Average Glucose Level", "BMI"),
  Correlation_with_Stroke = round(c(cor_age, cor_glucose, cor_bmi), 2)
)

# Display the correlation table with kable
kable(correlation_table, caption = "Correlation Coefficients with Stroke (Individuals Under 60 Years Old)")
```
Looking at the correlation coefficients, we notice that the correlation between `age` and `stroke` drops to 0.14 (versus 0.24 for the full dataset). The same goes for the correlation between `avg_glucose_level` and `stroke` which 0.07 (versus 0.13 for the full dataset). The correlation between `bmi` and `stroke` stays extremely low 0.06 (versus 0.04). 
The correlations drop with the target variable `stroke` after stratification for individuals below 60 suggest that while age and glucose levels are known risk factors for stroke, their influence may be less pronounced among younger individuals. 

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(plotly)
library(ggplot2)
library(dplyr)

# Updated list of categorical variables for the analysis with readable names
variables_to_summarize <- c("ever_married", "work_type", 
                             "smoking_status", "hypertension", 
                             "heart_disease")
readable_names <- c("Ever Married", "Work Type", 
                    "Smoking Status", "Hypertension", 
                    "Heart Disease")

# Function to create a bar chart based on the selected variable
create_bar_chart <- function(data, variable, readable_name) {
  # Create a reactive data frame that filters "Other" for gender
  filtered_data <- data
  if (variable == "gender") {
    filtered_data <- filtered_data %>% filter(gender != "Other")
  }
  
  # Generate the bar plot
  p <- ggplot(filtered_data, aes_string(x = variable, fill = "as.factor(stroke)")) +
    geom_bar(position = "fill") +
    labs(fill = "STROKE", y = "Proportion", 
         title = paste("Proportion of Stroke by", readable_name, "for Under 60 Years Old")) +
    theme_minimal() +
    scale_fill_manual(values = c("0" = "#1f77b4", "1" = "#ff7f0e")) # Custom colors

  # Convert ggplot to an interactive plotly object
  ggplotly(p)
}

# Generating and displaying individual plots
for (i in seq_along(variables_to_summarize)) {
  var <- variables_to_summarize[i]
  readable_name <- readable_names[i]  # Get the corresponding readable name
  bar_plot <- create_bar_chart(under_60_data, var, readable_name)
  print(bar_plot)
}
```

- `ever_married`:Individuals that have ever been married have a higher proportion of stroke (around 2.88%) than those who have never been married (around 0.49%).  

- `work_type`:The category `children` has a proportion of around 0.29% of stroke, which is lower than the other categories (around 2%). 

- `smoking_status`: `formerly smoked` has the highest proportion of stroke (3.23%), followed closely by the category `smokes` (2.84%). Lastly, `never smoked` has the lowest proportion of stroke (1.34%). 

- `hypertension`: Individuals that have hypertension have a higher proportion of stroke (around 6.44%) than those who don't (1.57%). 

- `heart_disease`:Individuals that have a heart disease have a higher proportion of stroke (around 6.45%) than those who don't (1.7%).

For readability reasons, we do not present the plots for the variables `gender` and `Residence_type` as the proportions of stroke appear to be consistent across the categories they comprise (See Appendix for reference). 

#### High-Risk Age Group
Now that we completed the EDA of the group aged below 60, let's check for the group aged of 60 and over.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(dplyr)
library(knitr)

# Generate summary of selected numerical variables for the over 60 group
summary_over_60_data <- summary(over_60_data[, c("age", "avg_glucose_level", "bmi")])

# Convert the summary to a data frame & display it with kable
summary_table_over_60 <- as.data.frame.matrix(summary_over_60_data)
knitr::kable(summary_table_over_60, caption = "Summary of Numerical Variables (Individuals of 60 and Over Years Old)", row.names = FALSE)
```

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(dplyr)
library(knitr)

# List of categorical variables to summarize for individuals over 60
variables_to_summarize <- c("stroke", "gender", "ever_married", 
                             "work_type", "Residence_type", 
                             "smoking_status", "hypertension", 
                             "heart_disease")

# Convert binary integer variables to factors in the over_60_data dataset
over_60_data <- over_60_data %>%
  mutate(
    stroke = as.factor(stroke),
    hypertension = as.factor(hypertension),
    heart_disease = as.factor(heart_disease)
  )

# Calculate total count for proportion calculation
total_count_over_60 <- nrow(over_60_data)

# Create summary table for individuals over 60
summary_table_over_60 <- bind_rows(
  lapply(variables_to_summarize, function(var) {
    over_60_data %>%
      group_by(.data[[var]]) %>%
      summarize(
        Count = n(),
        Proportion = n() / total_count_over_60,
        .groups = "drop"
      ) %>%
      rename(Type = .data[[var]]) %>%
      mutate(
        Variable = var,
        Type = as.character(Type),
        Proportion = round(Proportion * 100, 2)  
      )
  })
) %>%
  select(Variable, Type, Count, Proportion) %>%  
  arrange(Variable, Type)                        

# Display the combined table with kable
knitr::kable(summary_table_over_60, caption = "Summary of Categorical Variables with Proportions (Individuals of 60 and Over Years Old)", row.names = FALSE)
```

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(plotly)
library(ggplot2)
library(dplyr)

# Function to create the histogram
create_histogram <- function(data, variable, stroke_variable, binwidth = 5, show_legend = FALSE) {
  # Extract the variable and stroke data
  original_data <- data[[variable]]
  stroke_data <- data[[stroke_variable]]
  
  # Calculate mean and standard deviation for reference lines
  mean_val <- mean(original_data, na.rm = TRUE)
  sd_val <- sd(original_data, na.rm = TRUE)
  mean_line <- mean_val
  sd_lines <- c(mean_val - sd_val, mean_val + sd_val)
  
  # Combine data and stroke status into a data frame
  plot_data <- data.frame(data = original_data, stroke = factor(stroke_data, labels = c("No Stroke", "Stroke")))
  
  # Generate the ggplot stacked histogram with mean and SD lines
  p <- ggplot(plot_data, aes(x = data, fill = stroke)) +
    geom_histogram(binwidth = binwidth, color = "white", position = "stack") +
    labs(title = paste("Distribution of", variable), 
         x = variable,  # Placeholder for the correct x label
         y = "Frequency", fill = "Stroke Status") +
    geom_vline(xintercept = mean_line, color = "blue", linetype = "dashed", linewidth = 1) +
    geom_vline(xintercept = sd_lines[1], color = "red", linetype = "dotted", linewidth = 0.8) +
    geom_vline(xintercept = sd_lines[2], color = "red", linetype = "dotted", linewidth = 0.8) +
    scale_fill_manual(values = c("No Stroke" = "#1f77b4", "Stroke" = "#ff7f0e")) +  # Custom colors
    theme_minimal()
  
  # Set x-axis label according to the variable
  if(variable == "avg_glucose_level") {
    p <- p + labs(x = "Average Glucose Level")
  } else if(variable == "age") {
    p <- p + labs(x = "Age")
  } else if(variable == "bmi") {
    p <- p + labs(x = "BMI")
  }

  # Convert to interactive Plotly plot
  ggplotly(p) %>%
    layout(showlegend = show_legend) # Control legend visibility
}

# Generate histograms for individuals over 60
hist_age <- create_histogram(over_60_data, "age", "stroke", binwidth = 5, show_legend = TRUE)
hist_glucose <- create_histogram(over_60_data, "avg_glucose_level", "stroke", binwidth = 5, show_legend = FALSE)
hist_bmi <- create_histogram(over_60_data, "bmi", "stroke", binwidth = 5, show_legend = FALSE)

# Combine histograms into a grid layout (1 row)
combined_histograms <- subplot(
  hist_age, hist_glucose, hist_bmi,
  nrows = 1, titleX = TRUE, titleY = TRUE
) %>%
  layout(
    title = "Histograms of Numerical Variables by Stroke Status (Individuals Over 60 Years)",
    showlegend = TRUE  # Ensure unified legend is displayed
  )

# Display the combined histograms
combined_histograms
```

Looking at the numerical variables summary and at the histograms for individuals of 60 and over years old, we find that: 

- `age`: The dataset includes individuals with ages ranging from 60 to 82 years, with an average age of 70.9 years (versus 43.35 years old for the full dataset). The median increase to 71 years old (versus 45 years old for the full dataset). This is a 26 years increase for the median ! 

- `avg_glucose_level`: The histogram of this variable still shows a right-skewed bimodal distribution. The mean of average glucose level slightly increase to 121.9 mg/dL (versus 106.18 mg/dL) and the same goes for the median, which rise to 96.97 mg/dL (versus 91.89 mg/dL). 

- `bmi`: The histogram shows a right-skewed distribution. The mean of 29.85 exhibits minimal fluctuation (versus 28.88), the same applies to the median of 27.70 (versus 28.80).


Same as for individuals below 60 years old, here are the violin plots for individuals of 60 and over years old:

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(plotly)

# Function to create a violin plot
create_violin_plot <- function(data, variable, stroke_variable) {
  # Ensure the stroke variable is a factor
  data[[stroke_variable]] <- as.factor(data[[stroke_variable]])
  
  # Generate the violin plot
  plot <- plot_ly(data, x = ~get(stroke_variable), y = ~get(variable), type = "violin",
                  box = list(visible = TRUE),
                  meanline = list(visible = TRUE),
                  name = variable) %>%  # Add the variable name here
    layout(
      title = paste("Violin Plot of", variable, "by Stroke (Individuals Aged 60 and Over)"),
      xaxis = list(title = "Stroke"),
      yaxis = list(title = variable)
    )
  
  plot
}

# Generate individual plots for individuals aged 60 and over
plot_age <- create_violin_plot(over_60_data, variable = "age", stroke_variable = "stroke")
plot_glucose <- create_violin_plot(over_60_data, variable = "avg_glucose_level", stroke_variable = "stroke")
plot_bmi <- create_violin_plot(over_60_data, variable = "bmi", stroke_variable = "stroke")

# Combine plots into a grid layout (1 row, 3 columns) with titles for each variable
combined_plot <- subplot(
  plot_age %>% layout(title = "Age"),
  plot_glucose %>% layout(title = "Average Glucose Level"),
  plot_bmi %>% layout(title = "BMI"),
  nrows = 1, titleX = TRUE, titleY = TRUE
) %>%
  layout(title = "Violin Plots of Numerical Variables by Stroke (Individuals Aged 60 and Over Years Old)")

# Display the combined plot
combined_plot
```

Even tough the proportions of stroke cases across the different value ranges of `age`, does not vary as much as the group below 60 years old, we still see a clear distribution of stroke towards older individuals. Individuals between 75 and 80 years old seem to experience stroke more. 

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(knitr)

# Calculate correlation coefficients for each variable for individuals aged 60 and over
cor_age_over_60 <- cor(as.numeric(over_60_data$age), as.numeric(over_60_data$stroke), method = "pearson")
cor_glucose_over_60 <- cor(as.numeric(over_60_data$avg_glucose_level), as.numeric(over_60_data$stroke), method = "pearson")
cor_bmi_over_60 <- cor(as.numeric(over_60_data$bmi), as.numeric(over_60_data$stroke), method = "pearson")

# Create a correlation table
correlation_table_over_60 <- data.frame(
  Variable = c("Age", "Average Glucose Level", "BMI"),
  Correlation_with_Stroke = round(c(cor_age_over_60, cor_glucose_over_60, cor_bmi_over_60), 2)
)

# Display the correlation table with kable
kable(correlation_table_over_60, caption = "Correlation Coefficients with Stroke (Individuals Aged 60 and Over)")
```

Looking at the correlation coefficients, we notice that the correlation between `age` and `stroke` drops to 0.17 (versus 0.24 for the full dataset). The same goes for the correlation between `avg_glucose_level` and `stroke` which 0.10 (versus 0.13 for the full dataset). The correlation coefficient between `bmi` and `stroke` becomes negative -0.04 (versus 0.04) but stays extremely low and indicate that BMI is not a strong predictor of stroke in individuals of 60 and over years old. 

For the variable `age`, the reduction of the correlation coefficient may suggest that while age remains an important risk factor for stroke, its predictive power diminishes within a narrower age range, possibly due to the high baseline incidence of stroke in this group, which can obscure the strength of the correlation with age alone.

Similarly, the correlation between `avg_glucose_level` and `stroke` decreases from 0.13 in the full dataset to 0.10 for individuals aged 60 and over. This decline implies that glucose levels, while still relevant, may play a somewhat less significant role in stroke risk within this specific age group. It may reflect the fact that at advanced ages, other age-related risk factors or comorbid conditions could overshadow the impact of glucose levels. 

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(plotly)
library(ggplot2)
library(dplyr)

# Updated list of categorical variables for the analysis
variables_to_summarize <- c("ever_married", "hypertension", "heart_disease")
readable_names <- c("Ever Married", "Hypertension", "Heart Disease")

# Function to create a bar chart based on the selected variable
create_bar_chart <- function(data, variable, readable_name) {
  # Generate the bar plot
  p <- ggplot(data, aes_string(x = variable, fill = "as.factor(stroke)")) +
    geom_bar(position = "fill") +
    labs(fill = "STROKE", y = "Proportion", 
         title = paste("Proportion of Stroke by", readable_name, "For 60 and Over Years Old")) +
    theme_minimal() +
    scale_fill_manual(values = c("0" = "#1f77b4", "1" = "#ff7f0e")) # Custom colors

  # Convert ggplot to an interactive plotly object
  ggplotly(p)
}

# Generating and displaying individual plots for individuals over 60
for (i in seq_along(variables_to_summarize)) {
  var <- variables_to_summarize[i]
  readable_name <- readable_names[i]  # Get the corresponding readable name
  bar_plot <- create_bar_chart(over_60_data, var, readable_name)
  print(bar_plot)
}
```

- `hypertension`: Same as for the group of individuals below 60 years old, individuals who have hypertension have a higher proportion of stroke (17.91%) than those who don't (11.85%). 

- `heart_disease`: Same as for the group of individuals below 60 years old, individuals who have a heart disease have a higher proportion of stroke (20.09%) than those who don't (11.88%).

For readability reasons, we do not present the plots for the variables `gender`, `Residence_type`, `smoking_status` and `work_type` as the proportions of stroke appear to be consistent across the categories they comprise (See Appendix for reference).
