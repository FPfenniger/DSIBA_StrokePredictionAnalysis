---
title: "_eda"
format: html
---
# Exploratory Data Analysis

<<<<<<< Updated upstream
<<<<<<< Updated upstream
```{r, warning=FALSE}
=======
```{r, message = FALSE}
>>>>>>> Stashed changes
=======
```{r, message = FALSE}
>>>>>>> Stashed changes
#| code-fold: true
#| code-summary: "Click to show code"
library(tidyverse)
library(plotly)
library(knitr)
library(caret)
library(vcd)
```

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
outlier_stroke_tb <- 
  read.csv("../../data/datasets/outlier_stroke_tb.csv")
balanced_stroke_tb <-
  read.csv("../../data/datasets/balanced_stroke_tb.csv")
preprocessed_stroke_tb <-
  read.csv("../../data/datasets/preprocessed_stroke_tb.csv")
```

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Numerical variables
numerical_variables <- c("age", "avg_glucose_level", "bmi")
```

move this to preprocessing later
```{r}
# Create a tibble with the numerical variables
numerical_tibble <- outlier_stroke_tb %>%
  select(all_of(numerical_variables))
```

remember standardised histograms? Reintroduce them.

## Descriptive Statistics

We start our EDA with a summary of the numerical and categorical variables in our dataset. The summary includes the count, mean, standard deviation, minimum, 1st quartile, median, 3rd quartile, and maximum values for numerical variables.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
# Generate summary of selected numerical variables
summary_table <- summary(outlier_stroke_tb[, c("age", "avg_glucose_level", "bmi")])

# Convert the summary to a data frame & display it with kable
summary_table <- as.data.frame.matrix(summary_table)
knitr::kable(summary_table, caption = "Summary of Numerical Variables", row.names = FALSE)
```

For the categorical variables, we present the total number and proportion of each categoryâ€™s occurrences. We combined all categorical variables into one table for a better overview.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
# List of categorical variables
variables_to_summarize <- c("stroke", "gender", "ever_married", "work_type", "Residence_type", "smoking_status", "hypertension", "heart_disease")

# Convert binary integer variables to factors
outlier_stroke_tb <- outlier_stroke_tb %>%
  mutate(
    stroke = as.factor(stroke),
    hypertension = as.factor(hypertension),
    heart_disease = as.factor(heart_disease)
  )

# Calculate total count for proportion calculation
total_count <- nrow(outlier_stroke_tb)

# Create summary table 
summary_table <- bind_rows(
  lapply(variables_to_summarize, function(var) {
    outlier_stroke_tb %>%
      group_by(.data[[var]]) %>%
      summarize(
        Count = n(),
        Proportion = n() / total_count,
        .groups = "drop"
      ) %>%
      rename(Type = .data[[var]]) %>%
      mutate(
        Variable = var,
        Type = as.character(Type),
        Proportion = round(Proportion * 100, 2)  
      )
  })
) %>%
  select(Variable, Type, Count, Proportion) %>%  
  arrange(Variable, Type)                        

# Display the combined table with kable
knitr::kable(summary_table, caption = "Summary of Categorical Variables with Proportion", row.names = FALSE)
```

## Univariate Analysis

### Numerical variables

First, we visualized all numerical variables in a histogram grouped by stroke occurrence to get an overview of the distribution of the data and their relationship with the target variable.
```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(ggplot2)
library(plotly)

# Function to create the histogram as plotly object
create_histogram <- function(data, variable, stroke_variable, binwidth = 5, show_legend = FALSE) {
  # Extract the variable and stroke data
  original_data <- data[[variable]]
  stroke_data <- data[[stroke_variable]]
  
  # Calculate mean and standard deviation for reference lines
  mean_val <- mean(original_data, na.rm = TRUE)
  sd_val <- sd(original_data, na.rm = TRUE)
  
  # Combine data and stroke status into a data frame
  plot_data <- data.frame(data = original_data, stroke = factor(stroke_data, labels = c("No Stroke", "Stroke")))
  
  # Generate the ggplot object (temporary)
  p <- ggplot(plot_data, aes(x = data, fill = stroke)) +
    geom_histogram(binwidth = binwidth, color = "white", position = "stack") +
    labs(y = "Frequency", fill = "Stroke Status") +
    scale_fill_manual(values = c("No Stroke" = "#1f77b4", "Stroke" = "#ff7f0e")) +  # Set custom colors
    theme_minimal() +
    theme(axis.title.x = element_blank(), plot.title = element_text(hjust = 0.5))  # Center title
  
  # Convert to interactive Plotly plot
  p_plotly <- ggplotly(p) %>%
    layout(showlegend = show_legend)  # Set legend visibility
  
  return(p_plotly)
}

# Generate histograms for each variable separately without repeating legends
hist_age <- create_histogram(outlier_stroke_tb, "age", "stroke", binwidth = 5, show_legend = FALSE) %>%
  layout(title = "Distribution of Age", xaxis = list(title = "Age"), 
         yaxis = list(title = "Frequency"))

hist_glucose <- create_histogram(outlier_stroke_tb, "avg_glucose_level", "stroke", binwidth = 5, show_legend = FALSE) %>%
  layout(title = "Distribution of Average Glucose Level", xaxis = list(title = "Average Glucose Level"), 
         yaxis = list(title = "Frequency"))

hist_bmi <- create_histogram(outlier_stroke_tb, "bmi", "stroke", binwidth = 5, show_legend = FALSE) %>%
  layout(title = "Distribution of BMI", xaxis = list(title = "BMI"), 
         yaxis = list(title = "Frequency"))

# Combine all histograms into a single interactive plot with a main title
combined_histograms <- subplot(hist_age, hist_glucose, hist_bmi, nrows = 1, titleY = TRUE,
                               shareX = TRUE, shareY = TRUE) %>%
  layout(title = "Histograms of Numerical Variables by Stroke", showlegend = TRUE)  # Set main title with legend visible

# Display combined histogram
combined_histograms
```

```{r}
# Load necessary libraries
library(ggplot2)
library(plotly)
library(dplyr)

# Function to create the histogram as a Plotly object
create_histogram <- function(data, variable, stroke_variable, binwidth = 5, show_legend = FALSE) {
  # Extract the variable and stroke data
  original_data <- data[[variable]]
  stroke_data <- data[[stroke_variable]]
  
  # Convert stroke_data into a factor with meaningful labels
  stroke_factor <- factor(stroke_data, levels = c(0, 1), labels = c("No Stroke", "Stroke"))
  
  # Create a plot_data frame with the transformed stroke variable
  plot_data <- data.frame(
    data = original_data,
    stroke = stroke_factor
  )
  
  # Generate the ggplot object
  p <- ggplot(plot_data, aes(x = data, fill = stroke)) +
    geom_histogram(binwidth = binwidth, color = "white", position = "stack") +
    labs(
      y = "Frequency",
      fill = "Stroke Status",
      title = paste("Distribution of", gsub("_", " ", variable))
    ) +
    # "No Stroke" = grey, "Stroke" = blue
    scale_fill_manual(values = c("No Stroke" = "grey50", "Stroke" = "#1f77b4")) +
    theme_minimal() +
    theme(
      axis.title.x = element_blank(),
      plot.title = element_text(hjust = 0.5),
      legend.position = ifelse(show_legend, "right", "none")
    )
  
  # Convert to interactive Plotly plot
  ggplotly(p) %>%
    layout(showlegend = show_legend)
}

# Generate histograms
hist_age <- create_histogram(
  data = outlier_stroke_tb,
  variable = "age",
  stroke_variable = "stroke",
  binwidth = 5,
  show_legend = TRUE  # Show legend only here
) %>%
  layout(
    xaxis = list(title = "Age"),
    yaxis = list(title = "Frequency")
  )

hist_glucose <- create_histogram(
  data = outlier_stroke_tb,
  variable = "avg_glucose_level",
  stroke_variable = "stroke",
  binwidth = 5,
  show_legend = FALSE
) %>%
  layout(
    xaxis = list(title = "Average Glucose Level"),
    yaxis = list(title = "Frequency")
  )

hist_bmi <- create_histogram(
  data = outlier_stroke_tb,
  variable = "bmi",
  stroke_variable = "stroke",
  binwidth = 5,
  show_legend = FALSE
) %>%
  layout(
    xaxis = list(title = "BMI"),
    yaxis = list(title = "Frequency")
  )

# Combine all histograms into a single interactive plot
combined_histograms <- subplot(
  hist_age, hist_glucose, hist_bmi,
  nrows = 1,
  titleX = TRUE,
  titleY = TRUE,
  margin = 0.05
) %>%
  layout(
    title = "Histograms of Numerical Variables by Stroke"
  )

# Display the combined histogram
combined_histograms
```





Based on the summary table for numerical variables and the histogram, we can observe the following descriptive characteristics:

-   `age`: The dataset includes individuals with ages ranging from 0.08 to 82 years, with an average age of 43.23 years but a peak around 57 years, a second peak around 78 years, and a standard deviation of 22.61 years.
-   `avg_glucose_level`: We can observe a right-skewed bimodal distribution with a mean of 106.15 and a standard deviation of 45.28. The average glucose levels range from 55.12 to 271.74 mg/dL.
-   `bmi`: The histogram shows a right-skewed distribution with a mean of 28.86 and a standard deviation of 7.85. The BMI values range from 10.3 to 97.6.

For completeness we added some violin plots of the numerical variables.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Function to create a violin plot
create_violin_plot <- function(data, variable, stroke_variable) {
  # Ensure the stroke variable is a factor
  data[[stroke_variable]] <- as.factor(data[[stroke_variable]])
  
  # Generate the violin plot with a name for the trace
  plot <- plot_ly(data, x = ~get(stroke_variable), y = ~get(variable), type = "violin",
                  box = list(visible = TRUE),
                  meanline = list(visible = TRUE),
                  name = variable) %>%  # Add this line to set the name
    layout(
      title = paste("Violin Plot of", variable, "by Stroke"),
      xaxis = list(title = "Stroke"),
      yaxis = list(title = variable)
    )
  
  plot
}

# Generate individual plots
plot_age <- create_violin_plot(outlier_stroke_tb, variable = "age", stroke_variable = "stroke")
plot_glucose <- create_violin_plot(outlier_stroke_tb, variable = "avg_glucose_level", stroke_variable = "stroke")
plot_bmi <- create_violin_plot(outlier_stroke_tb, variable = "bmi", stroke_variable = "stroke")

# Combine plots into a grid layout (1 row, 3 columns)
combined_plot <- subplot(
  plot_age, plot_glucose, plot_bmi,
  nrows = 1, titleX = TRUE, titleY = TRUE
) %>%
  layout(title = "Violin Plots of Numerical Variables by Stroke")

# Display the combined plot
combined_plot
```
The histogram and violin charts have been grouped by stroke occurrence. This allows us to observe the distribution of the data for each variable in relation to the target variable `stroke`. Based on the charts, `age` and `avg_glucose_level` exhibit notable differences in the proportions of stroke cases across their value ranges. Stroke cases are more frequent at higher glucose levels and in the age range of 60 to 80 years. 

The variable `age` shows a weak positive relationship with the target variable `stroke` (correlation coefficient of 0.24). `avg_glucose_level` shows an even weaker positive relationship with the target variable (correlation coefficient of 0.13). In contrast, `bmi` and `stroke` show no relationship with a correlation coefficient of 0.04.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
library(knitr)

# Calculate correlation coefficients for each variable with stroke
cor_age <- cor(as.numeric(outlier_stroke_tb$age), as.numeric(outlier_stroke_tb$stroke), method = "pearson")
cor_glucose <- cor(as.numeric(outlier_stroke_tb$avg_glucose_level), as.numeric(outlier_stroke_tb$stroke), method = "pearson")
cor_bmi <- cor(as.numeric(outlier_stroke_tb$bmi), as.numeric(outlier_stroke_tb$stroke), method = "pearson")

# Create a correlation table
correlation_table <- data.frame(
  Variable = c("Age", "Average Glucose Level", "BMI"),
  Correlation_with_Stroke = round(c(cor_age, cor_glucose, cor_bmi), 2)
)

# Display the correlation table with kable
kable(correlation_table, caption = "Correlation Coefficients with Stroke")
```

### Categorical variables

The second part of our EDA examines the distribution of the categorical variables and their relationship with the target variable in a stacked bar chart:

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Define a custom function to create proportion plots with titles above
create_proportion_plot <- function(data, variable, title, x_labels = NULL, fill_colors = c("#1f77b4", "#ff7f0e")) {
  p <- ggplot(data, aes_string(x = variable, fill = "as.factor(stroke)")) +
    geom_bar(position = "fill") +
    labs(
      title = title,
      x = title,      # Using title as x-axis label for consistency
      y = "Proportion"
    ) +
    scale_fill_manual(values = fill_colors, labels = c("No Stroke", "Stroke")) +
    theme_minimal() +
    theme(
      plot.title.position = "plot",                   # Ensure title is above the plot
      plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Centered and styled title
      axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x labels for readability
      plot.margin = margin(t = 30, r = 10, b = 10, l = 10)  # Increase top margin for title
    )
  
  # If custom labels are provided, apply them
  if (!is.null(x_labels)) {
    p <- p + scale_x_discrete(labels = x_labels)
  }
  
  ggplotly(p) %>%
    layout(
      margin = list(t = 50)  # Additional top margin in plotly to prevent title overlap
    )
}

# Define choices for the variable selection, excluding Gender and Residence Type
x_variable_choices <- c(
  "Smoking Status" = "smoking_status",
  "Hypertension" = "hypertension", 
  "Heart Disease" = "heart_disease",
  "Ever Married" = "ever_married",
  "Work Type" = "work_type"
)

# Create a filtered data frame based on all selected variables
filtered_data <- outlier_stroke_tb %>%
  filter(gender != "Other")  # Remove records where gender is 'Other'

# Generate the Smoking Status plot
plot_smoking <- create_proportion_plot(
  data = filtered_data,
  variable = "smoking_status",
  title = "Smoking Status",
  x_labels = c("Unknown", "Never smoked", "Formerly smoked", "Smokes")
)

# Generate the Hypertension plot
plot_hypertension <- create_proportion_plot(
  data = filtered_data,
  variable = "hypertension",
  title = "Hypertension",
  x_labels = c("No", "Yes")
)

# Generate the Heart Disease plot
plot_heart_disease <- create_proportion_plot(
  data = filtered_data,
  variable = "heart_disease",
  title = "Heart Disease",
  x_labels = c("No", "Yes")
)

# Generate the Ever Married plot
plot_ever_married <- create_proportion_plot(
  data = filtered_data,
  variable = "ever_married",
  title = "Ever Married",
  x_labels = c("No", "Yes")
)

# Generate the Work Type plot
plot_work_type <- create_proportion_plot(
  data = filtered_data,
  variable = "work_type",
  title = "Work Type",
  x_labels = c("Govt_job", "Never_worked", "Private", "Self-employed", "children")
)

# Combine all five plots into a two-row layout using subplot
combined_plot <- subplot(
  plot_smoking, plot_hypertension, plot_heart_disease, 
  plot_ever_married, plot_work_type,
  nrows = 2,          # Arrange plots in two rows
  margin = 0.05,      # Margin between plots
  titleX = TRUE,
  titleY = TRUE
) %>%
  layout(
    title = list(
      text = "Distribution Across Risk Factors",
      font = list(size = 24, family = "Arial", color = "#000000"),
      x = 0.5,               # Center the title
      y = 0.95,              # Position the title above the plots
      xanchor = "center",
      yanchor = "top"
    ),
    showlegend = FALSE      # Remove legend from the combined plot
  )

# Display the combined plot
combined_plot
```



Relevant differences in the proportions of stroke cases can be observed across the levels of the following categorical variables:

-   `smoking_status`: The proportion of stroke cases is highest among individuals who formerly smoked, compared to those who never smoked or currently smoke. This relationship could be influenced by age, as individuals who formerly smoked may be older on average. Current smokers show a slightly higher proportion of stroke cases than those who never smoked.
-   `hypertension`: Individuals with hypertension have a higher proportion of stroke cases compared to those without hypertension.
-   `ever_married`: Married individuals show a higher proportion of stroke cases compared to those who have never been married. This relationship might be influenced by age, as younger individuals are less likely to be married, and the risk of stroke typically increases with age.
-   `work_type`: The proportion of stroke cases varies across work types, with private sector employees and self-employed individuals exhibiting higher proportions of stroke cases than individuals in other work categories.
-   `heart disease`: Individuals with heart disease have a higher proportion of stroke cases compared to those without heart disease.

In contrast, the following variables appear to be not relevant, as there are no differences in the proportions of stroke cases across their levels (see Appendix):

-   `gender`

-   `Residence_type`

Based on the univariate analysis, `heart_disease`, `smoking_status`, `hypertension`, `ever_married`, and `work_type` could be potential candidates for further exploration and modeling among the categorical variables. These variables exhibit notable differences in the proportions of stroke cases across their levels, suggesting they may be important predictors of stroke risk. Among the numerical variables, `age` and `avg_glucose_level` show a weak to very weak positive relationship with the target variable `stroke`, suggesting they may also be important predictors of stroke risk. These predictors may even become more relevant when examined in a balanced dataset, which our initial hypotheses would suggest. 

## Bivariate Analysis

In the bivariate analysis we examined correlations between our features. We used a correlation matrix to visualize the relationships between the numerical variables and the target variable `stroke`.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
# Select the numeric columns from your data
numeric_data <- outlier_stroke_tb[, c("age", "avg_glucose_level", "bmi")]

# Calculate the correlation matrix
correlation_matrix <- cor(numeric_data, use = "complete.obs")

# Convert the correlation matrix to a format that plotly can use (optional step)
heatmap_data <- as.data.frame(as.table(correlation_matrix))

# Plot the correlation matrix as a heatmap using plotly
plot_ly(
  x = colnames(correlation_matrix),
  y = rownames(correlation_matrix),
  z = correlation_matrix,
  type = "heatmap",
  colorscale = "Viridis"  # Corrected typo
) %>%
  layout(
    title = "Correlation Matrix Heatmap",
    xaxis = list(title = "", tickangle = 45),
    yaxis = list(title = "")
  )
```

Our numerical features don't seem to be strongly correlated with each other. The strongest correlation is observed between `age` and `bmi` (0.324), which is not surprising, as BMI is often used as a measure of body fat and is known to increase with age. The correlation between the other numerical features is rather low. We can therefore safely assume independence of our numerical features. A further examination of the categorical features for collinearity will be done in the final data preparation in the next part. 