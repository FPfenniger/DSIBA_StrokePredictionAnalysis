---
title: "_eda"
format: html
---

# Exploratory Data Analysis

```{r, echo = FALSE, message = FALSE, warning = FALSE}
library(tidyverse)
library(plotly)
library(knitr)
library(caret)
library(vcd)
library(ggplot2)
library(reshape2)
library(ggplot2)
library(plotly)
library(dplyr)
library(knitr)
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
library(scales)
```

```{r, echo = FALSE, message = FALSE, warning = FALSE}
outlier_stroke_tb <- 
  read.csv("../../data/datasets/outlier_stroke_tb.csv")
balanced_stroke_tb <-
  read.csv("../../data/datasets/balanced_stroke_tb.csv")
preprocessed_stroke_tb <-
  read.csv("../../data/datasets/preprocessed_stroke_tb.csv")
```

```{r, echo = FALSE, message = FALSE, warning = FALSE}
# Numerical variables
numerical_variables <- c("age", "avg_glucose_level", "bmi")

# Create a tibble with the numerical variables
numerical_data <- outlier_stroke_tb %>%
  select(all_of(numerical_variables))
```

```{r, echo = FALSE, message = FALSE, warning = FALSE}
# Categorical variables
categorical_variables <- c("stroke", "gender", "ever_married", "work_type", "Residence_type", "smoking_status", "hypertension", "heart_disease")

# Create a tibble with the categorical variables
categorical_data <- outlier_stroke_tb %>%
  select(all_of(categorical_variables))
```

## Descriptive Statistics

We start our EDA with a summary of the numerical and categorical variables in our dataset. The summary includes the mean, standard deviation, minimum, 1st quartile, median, 3rd quartile, and maximum values for numerical variables.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
# Generate summary of selected numerical variables
summary_table <- summary(numerical_data)

# Show the summary table
knitr::kable(summary_table, caption = "Summary of Numerical Variables")
```

For the categorical variables, we present the total number and proportion of each category’s occurrences. We combined all categorical variables into one table for a better overview.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Convert binary integer variables to factors
categorical_data <- categorical_data %>%
  mutate(
    across(c("stroke", "hypertension", "heart_disease"), as.factor)
  )

# Calculate total count for proportion calculation and create summary table
summary_table <- categorical_data %>%
  pivot_longer(cols = all_of(categorical_variables), names_to = "Variable", values_to = "Type") %>%
  group_by(Variable, Type) %>%
  summarize(
    Count = n(),
    Proportion = round((n() / nrow(categorical_data)) * 100, 2),
    .groups = "drop"
  ) %>%
  arrange(Variable, Type)

# Show the summary table
knitr::kable(summary_table, caption = "Summary of Categorical Variables with Proportion", row.names = FALSE)
```


## Univariate Analysis

Since our dataset comprises a variety of health-related metrics, we will briefly describe the meaning of each below:

`Body Mass Index (BMI)` is a standardized measure used to assess body fat based on an individual’s weight relative to their height. It is calculated by dividing a person’s weight in kilograms by the square of their height in meters (kg/m²). BMI serves as a useful screening tool to categorize individuals into different weight status groups, which are associated with various health risks (World Health Organization [WHO], 2008)[^6].

The BMI classifications are as follows:

- Underweight: BMI less than 18.5 kg/m²
- Normal weight: BMI between 18.5 and 24.9 kg/m²
- Pre-obesity (Overweight): BMI between 25.0 and 29.9 kg/m²
- Obesity Class I: BMI between 30.0 and 34.9 kg/m²
- Obesity Class II: BMI between 35.0 and 39.9 kg/m²
- Obesity Class III: BMI of 40.0 kg/m² and above


**Diabetic Range**

Diabetes mellitus is a chronic medical condition characterized by elevated `avg_glucose_levels`. Accurate classification of blood glucose levels is essential for the diagnosis and management of diabetes. According to the American Diabetes Association (ADA, 2023), the diagnostic criteria for diabetes based on blood glucose levels are as follows:

- Fasting Blood Glucose: A level of 126 mg/dL (7.0 mmol/L) or higher after at least 8 hours of fasting.
- Postprandial Blood Glucose: A level of 140 mg/dL (7.8 mmol/L) or higher two hours after eating.

These thresholds are utilized to identify individuals who may require medical intervention to manage their blood glucose levels and reduce the risk of diabetes-related complications (ADA, 2023)[^8].
 
[^7]: World Health Organization. Regional Office for the Western Pacific. (2000). The Asia-Pacific perspective: Redefining obesity and its treatment. Sydney: Health Communications Australia. Retrieved from https://iris.who.int/handle/10665/206936

[^8]: American Diabetes Association. (2023). Standards of Medical Care in Diabetes—2023. Diabetes Care, 46(Supplement 1), S1–S264. Retrieved from https://diabetesjournals.org/care/article/46/Supplement_1/S1/148054/Introduction-and-Methodology-Standards-of-Care-in


### Numerical variables

First, we visualized all numerical variables in a violin plot to get an overview of the distribution of the data and their relationship with the target variable.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Function to create a violin plot
create_violin_plot <- function(data, variable, stroke_variable) {
  # Ensure the stroke variable is a factor
  data[[stroke_variable]] <- as.factor(data[[stroke_variable]])
  
  # Generate the violin plot with a name for the trace
  plot <- plot_ly(data, x = ~get(stroke_variable), y = ~get(variable), type = "violin",
                  box = list(visible = TRUE),
                  meanline = list(visible = TRUE),
                  name = variable) %>%  # Add this line to set the name
    layout(
      title = paste("Violin Plot of", variable, "by Stroke"),
      xaxis = list(title = "Stroke"),
      yaxis = list(title = variable)
    )
  
  plot
}

# Generate individual plots
plot_age <- create_violin_plot(outlier_stroke_tb, variable = "age", stroke_variable = "stroke")
plot_glucose <- create_violin_plot(outlier_stroke_tb, variable = "avg_glucose_level", stroke_variable = "stroke")
plot_bmi <- create_violin_plot(outlier_stroke_tb, variable = "bmi", stroke_variable = "stroke")

# Combine plots into a grid layout (1 row, 3 columns)
combined_plot <- subplot(
  plot_age, plot_glucose, plot_bmi,
  nrows = 1, titleX = TRUE, titleY = TRUE
) %>%
  layout(title = "Numerical Variables I")

# Display the combined plot
combined_plot
```

Based on the summary table for numerical variables and the violin plot, we can observe the following descriptive characteristics:

-   `age`: The dataset includes individuals with ages ranging from 0.08 to 82 years, with an average age of 43.23 years but a peak around 57 years, a second peak around 78 years, and a standard deviation of 22.61 years.
-   `avg_glucose_level`: We can observe a right-skewed bimodal distribution with a mean of 106.15 and a standard deviation of 45.28. The average glucose levels range from 55.12 to 271.74 mg/dL.
-   `bmi`: The histogram shows a right-skewed distribution with a mean of 28.86 and a standard deviation of 7.85. The BMI values range from 10.3 to 97.6. 

The dataset population exhibits higher levels of `avg_glucose_level` and `bmi` than recommended by WHO.



```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

suppressWarnings({
  library(plotly)
  library(ggplot2)
  library(dplyr)
  library(plotly)
  
  # Function to calculate proportion of people with stroke by bins and create a line plot
  create_proportion_line <- function(data, variable, stroke_variable, binwidth = 5) {
    original_data <- data[[variable]]
    stroke_data <- data[[stroke_variable]]

    # Define bin edges
    range_vals <- range(original_data, na.rm = TRUE)
    breaks <- seq(floor(range_vals[1]), ceiling(range_vals[2]) + binwidth, by = binwidth)

    # Cut the data into bins
    binned_data <- data.frame(value = original_data, stroke = stroke_data) %>%
      mutate(bin = cut(value, breaks = breaks, include.lowest = TRUE, right = FALSE))

    # Compute proportion stroke in each bin
    prop_data <- binned_data %>%
      group_by(bin) %>%
      summarize(
        n = n(),
        stroke_n = sum(stroke == 1, na.rm = TRUE),
        prop_stroke = stroke_n / n,
        .groups = "drop"
      )

    # Calculate bin midpoints
    bin_mids <- sapply(strsplit(gsub("\\[|\\]|\\(|\\)", "", levels(prop_data$bin)), ","), 
                       function(x) mean(as.numeric(x)))
    prop_data <- prop_data %>%
      mutate(bin_mid = bin_mids[as.numeric(bin)])

    # Create a line plot using plotly
    line_plot <- plot_ly(
      data = prop_data,
      x = ~bin_mid,
      y = ~prop_stroke,
      type = 'scatter',
      mode = 'lines+markers',
      line = list(color = '#1f77b4'),
      marker = list(color = '#1f77b4')
    ) %>%
      layout(
        yaxis = list(
          title = "Stroke (proportion)",
          rangemode = 'tozero',
          titlefont = list(size = 12),
          tickfont = list(size = 10)
        ),
        xaxis = list(
          title = "",
          tickfont = list(size = 10)
        ),
        showlegend = FALSE,
        title = list(
          text = paste("Proportion Stroke by", gsub("_", " ", variable)),
          font = list(size = 14)
        ),
        font = list(size = 10)  # General font size
      )

    return(line_plot)
  }

  # Function to create the histogram as a Plotly object
  create_histogram <- function(data, variable, stroke_variable, binwidth = 5, show_legend = FALSE) {
    original_data <- data[[variable]]
    stroke_data <- data[[stroke_variable]]
    stroke_factor <- factor(stroke_data, levels = c(0, 1), labels = c("No Stroke", "Stroke"))

    plot_data <- data.frame(data = original_data, stroke = stroke_factor)

    p <- ggplot(plot_data, aes(x = data, fill = stroke)) +
      geom_histogram(binwidth = binwidth, color = "white", position = "stack") +
      labs(
        y = "Stroke (count)",
        fill = "Stroke Status",
        title = paste("Distribution of", gsub("_", " ", variable))
      ) +
      scale_fill_manual(values = c("No Stroke" = "grey50", "Stroke" = "#1f77b4")) +
      theme_minimal(base_size = 10) +  # Set base font size for ggplot
      theme(
        plot.title = element_text(hjust = 0.5, size = 12),          # Smaller plot title
        axis.title.y = element_text(size = 10),                     # Smaller y-axis title
        axis.text.y = element_text(size = 8),                       # Smaller y-axis text
        axis.text.x = element_text(size = 8),                       # Smaller x-axis text if needed
        legend.title = element_text(size = 10),                     # Smaller legend title
        legend.text = element_text(size = 8),                       # Smaller legend text
        axis.title.x = element_blank(),
        legend.position = ifelse(show_legend, "right", "none")
      )

    ggplotly(p) %>% 
      layout(
        showlegend = show_legend,
        title = list(font = list(size = 14)),
        xaxis = list(
          title = ifelse(show_legend, "", "Age"),  # Adjust as needed
          tickfont = list(size = 10)
        ),
        yaxis = list(
          title = "Stroke (count)", 
          titlefont = list(size = 12),
          tickfont = list(size = 10)
        ),
        legend = list(
          title = list(text = ""),  # Remove legend title
          font = list(size = 10)    # Smaller legend text
        ),
        font = list(
          size = 10  # General font size
        )
      )
  }

  # Assuming outlier_stroke_tb is defined and stroke is 0/1
  line_age <- create_proportion_line(outlier_stroke_tb, "age", "stroke", binwidth = 5) %>%
    layout(
      xaxis = list(title = "", tickfont = list(size = 10)),
      yaxis = list(
        title = "Stroke (proportion)",
        titlefont = list(size = 12),
        tickfont = list(size = 10)
      )
    )
  hist_age <- create_histogram(outlier_stroke_tb, "age", "stroke", binwidth = 5, show_legend = TRUE) %>%
    layout(
      xaxis = list(
        title = "Age",
        titlefont = list(size = 12),
        tickfont = list(size = 10)
      ),
      yaxis = list(
        title = "Stroke (count)",
        titlefont = list(size = 12),
        tickfont = list(size = 10)
      ),
      legend = list(
        font = list(size = 10)
      )
    )

  line_glucose <- create_proportion_line(outlier_stroke_tb, "avg_glucose_level", "stroke", binwidth = 5) %>%
    layout(
      xaxis = list(title = "", tickfont = list(size = 10)),
      yaxis = list(
        title = "Stroke (proportion)",
        titlefont = list(size = 12),
        tickfont = list(size = 10)
      )
    )
  hist_glucose <- create_histogram(outlier_stroke_tb, "avg_glucose_level", "stroke", binwidth = 5, show_legend = FALSE) %>%
    layout(
      xaxis = list(
        title = "Average Glucose Level",
        titlefont = list(size = 12),
        tickfont = list(size = 10)
      ),
      yaxis = list(
        title = "Stroke (count)",
        titlefont = list(size = 12),
        tickfont = list(size = 10)
      )
    )

  line_bmi <- create_proportion_line(outlier_stroke_tb, "bmi", "stroke", binwidth = 5) %>%
    layout(
      xaxis = list(title = "", tickfont = list(size = 10)),
      yaxis = list(
        title = "Stroke (proportion)",
        titlefont = list(size = 12),
        tickfont = list(size = 10)
      )
    )
  hist_bmi <- create_histogram(outlier_stroke_tb, "bmi", "stroke", binwidth = 5, show_legend = FALSE) %>%
    layout(
      xaxis = list(
        title = "BMI",
        titlefont = list(size = 12),
        tickfont = list(size = 10)
      ),
      yaxis = list(
        title = "Stroke (count)",
        titlefont = list(size = 12),
        tickfont = list(size = 10)
      )
    )

  # Stack line above histogram for each variable with height adjustments
  age_subplot <- subplot(
    line_age, hist_age, 
    nrows = 2, shareX = TRUE, titleY = TRUE, heights = c(0.3, 0.7)
  )
  glucose_subplot <- subplot(
    line_glucose, hist_glucose, 
    nrows = 2, shareX = TRUE, titleY = TRUE, heights = c(0.3, 0.7)
  )
  bmi_subplot <- subplot(
    line_bmi, hist_bmi, 
    nrows = 2, shareX = TRUE, titleY = TRUE, heights = c(0.3, 0.7)
  )

  # Combine all three sets into a single row
  combined_subplots <- subplot(
    age_subplot, glucose_subplot, bmi_subplot, 
    nrows = 1, margin = 0.05, titleX = TRUE, titleY = TRUE
  ) %>%
    layout(
      title = list(
        text = "Numerical Variables II",
        font = list(size = 16)
      ),
      font = list(size = 10)  # General font size for combined plot
    )

  # Display the combined subplots
  combined_subplots
})
```


The violin plots and histograms have been grouped by stroke occurrence. This allows us to observe the distribution of the data for each variable in relation to the target variable `stroke`. Based on the charts, `age` and `avg_glucose_level` exhibit notable differences in the proportions of stroke cases across their value ranges. Stroke cases are more frequent at higher glucose levels in the diabetic range and in the age range of 60 to 80 years.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Calculate correlation coefficients for each variable with stroke
cor_age <- cor(as.numeric(outlier_stroke_tb$age), as.numeric(outlier_stroke_tb$stroke), method = "pearson")

cor_glucose <- cor(as.numeric(outlier_stroke_tb$avg_glucose_level), as.numeric(outlier_stroke_tb$stroke), method = "pearson")

cor_bmi <- cor(as.numeric(outlier_stroke_tb$bmi), as.numeric(outlier_stroke_tb$stroke), method = "pearson")

# Create a correlation table
correlation_table <- data.frame(
  Variable = c("Age", "Average Glucose Level", "BMI"),
  Correlation_with_Stroke = round(c(cor_age, cor_glucose, cor_bmi), 2)
)

# Display the correlation table with kable
kable(correlation_table, caption = "Correlation Coefficients with Stroke")
```

The variable `age` shows a weak positive relationship with the target variable `stroke` (correlation coefficient of 0.24). `avg_glucose_level` shows an even weaker positive relationship with the target variable (correlation coefficient of 0.13). In contrast, `bmi` and `stroke` show no relationship with a correlation coefficient of 0.04.

### Categorical variables

The second part of our EDA examines the distribution of the categorical variables and their relationship with the target variable in a stacked bar chart:

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(scales)

# Define the variables and their labels for categories
var_categories <- list(
  "smoking_status" = c("Unknown", "Never smoked", "Formerly smoked", "Smokes"),
  "hypertension" = c("No", "Yes"),
  "heart_disease" = c("No", "Yes"),
  "ever_married" = c("No", "Yes"),
  "work_type" = c("Govt_job", "Never_worked", "Private", "Self-employed", "children")
)

# Filter data and select variables of interest
filtered_data <- outlier_stroke_tb %>%
  filter(gender != "Other") %>%
  select(stroke, all_of(names(var_categories))) %>%
  # Convert 'stroke' to a factor with labels
  mutate(
    stroke = factor(stroke, levels = c(0, 1), labels = c("No Stroke", "Stroke")),
    # Convert all categorical variables to character for consistency
    across(all_of(names(var_categories)), as.character)
  )

# Pivot data to long format
long_data <- filtered_data %>%
  pivot_longer(
    cols = all_of(names(var_categories)), 
    names_to = "variable", 
    values_to = "category"
  )

# Compute the proportion of "Stroke" for each variable-category combination
order_data <- long_data %>%
  group_by(variable, category) %>%
  summarize(
    stroke_count = sum(stroke == "Stroke", na.rm = TRUE),
    total = n(),
    prop = stroke_count / total,
    .groups = "drop"
  ) %>%
  # Keep only rows where stroke_count > 0 to avoid unnecessary categories
  filter(stroke_count > 0)

# For each variable, reorder categories by ascending proportion of Stroke
order_data <- order_data %>%
  group_by(variable) %>%
  arrange(prop, .by_group = TRUE) %>%
  mutate(cat_rank = row_number()) %>%
  ungroup()

# Compute a variable-level order by mean stroke proportion
var_order_data <- order_data %>%
  group_by(variable) %>%
  summarize(var_prop = mean(prop), .groups = "drop") %>%
  arrange(var_prop) %>%
  mutate(var_rank = row_number())

# Join category and variable ranks back to long_data
long_data <- long_data %>%
  left_join(order_data %>% select(variable, category, cat_rank), by = c("variable", "category")) %>%
  left_join(var_order_data %>% select(variable, var_rank), by = "variable") %>%
  # Create a combined label "Variable: Category"
  mutate(variable_category = paste(variable, category, sep = ": "))

# Arrange by var_rank (variable-level order), then cat_rank (category-level order)
long_data <- long_data %>%
  arrange(var_rank, cat_rank) %>%
  # Set factor levels according to this ordering
  mutate(variable_category = factor(variable_category, levels = unique(variable_category)))

# Create the plot
p <- ggplot(long_data, aes(x = variable_category, fill = stroke)) +
  geom_bar(position = "fill") +
  labs(
    title = "Categorical Variables",
    x = NULL,      # After flipping, becomes y-axis
    y = "Proportion",
    fill = "Stroke Status"
  ) +
  scale_fill_manual(values = c("No Stroke" = "grey50", "Stroke" = "#1f77b4")) +
  scale_y_continuous(labels = percent) + # Convert proportion to percentage
  theme_minimal() +
  theme(
    plot.title.position = "plot",
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
  ) +
  coord_flip()

# Convert to Plotly
combined_plot <- ggplotly(p) %>%
  layout(
    margin = list(t = 50),
    showlegend = TRUE,
    legend = list(title = list(text = ""))
  )

# Display the combined horizontal bar chart
combined_plot
```

Relevant differences in the proportions of stroke cases can be observed across the levels of the following categorical variables:

-   `smoking_status`: The proportion of stroke cases is highest among individuals who formerly smoked, compared to those who never smoked or currently smoke. This relationship could be influenced by age, as individuals who formerly smoked may be older on average. Current smokers show a slightly higher proportion of stroke cases than those who never smoked.
-   `hypertension`: Individuals with hypertension have a higher proportion of stroke cases compared to those without hypertension.
-   `ever_married`: Married individuals show a higher proportion of stroke cases compared to those who have never been married. This relationship might be influenced by age, as younger individuals are less likely to be married, and the risk of stroke typically increases with age.
-   `work_type`: The proportion of stroke cases varies across work types, with private sector employees and self-employed individuals exhibiting higher proportions of stroke cases than individuals in other work categories.
-   `heart disease`: Individuals with heart disease have a higher proportion of stroke cases compared to those without heart disease.

In contrast, the following variables appear to be not relevant, as there are no differences in the proportions of stroke cases across their levels (see Appendix):

-   `gender`

-   `Residence_type`

Based on the univariate analysis, `heart_disease`, `smoking_status`, `hypertension`, `ever_married`, and `work_type` could be potential candidatesamong the categorical variables for further exploration and modeling. These variables exhibit notable differences in the proportions of stroke cases across their levels, suggesting they may be important predictors of stroke risk. 
Among the numerical variables, `age` and `avg_glucose_level` show a weak to very weak positive relationship with the target variable `stroke`, suggesting they may also be important predictors of stroke risk. These predictors may even become more relevant when examined in a balanced dataset, which our initial hypotheses would suggest.

The initial observations align with existing research highlighting the significance of these factors in strokes. For instance, a study by Ute Mons et al. (2015)[^9] demonstrated that smoking significantly increases the risk of cardiovascular events, including stroke, among older adults.
Additionally, research has shown that smoking cessation can substantially lower the risk of recurrent vascular events and all-cause mortality after a first cardiovascular event[^10].
Regarding numerical variables, the exploratory data analysis indicates that age and avg_glucose_level have a positive relationship with stroke occurrence. This is consistent with literature suggesting that elevated fasting blood glucose levels are associated with an increased risk of ischemic stroke [^11].
Furthermore, age is a well-established risk factor for stroke, with older individuals facing higher susceptibility [^12].

These insights underscore the importance of considering both categorical and numerical variables in developing predictive models for stroke risk assessment.

Certainly! Here are the four references formatted in APA style with footnote markers, similar to your example:

[^9]: Mons, U., Müezzinler, A., Gellert, C., Schöttker, B., Abnet, C. C., Bobak, M., … & Brenner, H. (2015). Impact of smoking and smoking cessation on cardiovascular events and mortality among older adults: Meta-analysis of individual participant data from prospective cohort studies of the CHANCES consortium. BMJ, 350, h1551. https://doi.org/10.1136/bmj.h1551

[^10]: Lee, S.-R., Choi, E.-K., Han, K.-D., Cha, M.-J., & Oh, S. (2019). Quit smoking to reduce stroke risk if you have irregular heartbeat. European Society of Cardiology. https://www.escardio.org/The-ESC/Press-Office/Press-releases/Quit-smoking-to-reduce-stroke-risk-if-you-have-irregular-heartbeat

[^11]: Sacco, R. L., Benjamin, E. J., Broderick, J. P., Dyken, M., Easton, J. D., Feinberg, W. M., … & Wolf, P. A. (1997). Risk factors. Stroke, 28(7), 1507–1517. https://doi.org/10.1161/01.STR.28.7.1507

[^12]: Boden-Albala, B., Sacco, R. L., Lee, H. S., Grahame-Clarke, C., Rundek, T., Elkind, M. V., … & Paik, M. C. (2008). Diabetes, fasting glucose levels, and risk of ischemic stroke and vascular events: Findings from the Northern Manhattan Study (NOMAS). Diabetes Care, 31(6), 1132–1137. https://doi.org/10.2337/dc08-0026


## Bivariate Analysis

In the bivariate analysis we examined correlations between our features. We used a correlation matrix to visualize the relationships between the numerical variables and the target variable `stroke`.

```{r, message = FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Calculate the correlation matrix
cormat <- cor(numerical_data, use = "complete.obs")

# Get lower triangle of the correlation matrix
  get_lower_tri<-function(cormat){
    cormat[upper.tri(cormat)] <- NA
    return(cormat)
  }
  # Get upper triangle of the correlation matrix
  get_upper_tri <- function(cormat){
    cormat[lower.tri(cormat)]<- NA
    return(cormat)
  }

# Helper function to reorder the correlation matrix
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}

# Reorder the correlation matrix (assuming reorder_cormat and get_upper_tri are defined)
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)

# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)

# Create the base heatmap
gheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(
    low = "blue", high = "red", mid = "white",
    midpoint = 0, limit = c(-1,1), space = "Lab",
    name = "Pearson Correlation"
  ) +
  coord_fixed()

# Add correlation coefficients, adjust theme and legend, and add a centered top title
gheatmap + 
  geom_text(aes(Var2, Var1, label = round(value, 2)), color = "black", size = 4) +
  ggtitle("Correlation Matrix Heatmap") +
  theme(
    plot.title.position = "plot",     # Title positioned at the top of the plot area
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"), # Center the title
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.border = element_blank(),
    panel.background = element_blank(),
    axis.ticks = element_blank(),
    legend.position = "right"
  ) +
  guides(fill = guide_colorbar(
    barwidth = 1,
    barheight = 7,
    title.position = "top",
    title.hjust = 0.5
  ))

```

Our numerical features don't seem to be strongly correlated with each other. The strongest correlation is observed between `age` and `bmi` (0.324), which is not surprising, as BMI is often used as a measure of body fat and is known to increase with age. The correlation between the other numerical features is rather low. We can therefore safely assume independence of our numerical features. A further examination of the categorical features for collinearity will be done in the final data preparation in the next part.
