---
title: "Interactive Shiny App"
output: html_document
runtime: shiny
---

```{r}
# Load necessary libraries
library(shiny)
library(plotly)
library(dplyr)
library(vcd)
library(htmltools)

# Load the data
outlier_stroke_tb <- read.csv("../data/outlier_stroke_tb.csv")

# Define categorical variables
cat_variables <- c("hypertension", "heart_disease", "ever_married", "work_type", "Residence_type", "smoking_status", "gender")

# Shiny app with stacked bar chart and association test results
shinyApp(
  ui = fluidPage(
    selectInput("selected_variable", "Choose a Variable:", choices = cat_variables),
    plotlyOutput("stacked_bar_chart"),
    htmlOutput("test_results")  # Output for Chi-Square and Cramér's V results
  ),
  
  server = function(input, output) {
    
    output$stacked_bar_chart <- renderPlotly({
      selected_variable <- input$selected_variable
      
      # Generate the stacked bar chart data
      plot_data <- outlier_stroke_tb %>%
        count(stroke = as.factor(stroke), category = as.factor(!!sym(selected_variable))) %>%
        rename(count = n)
      
      # Create the stacked bar chart
      plot <- plot_ly(plot_data, x = ~stroke, y = ~count, color = ~category,
                      type = "bar") %>%
        layout(barmode = "stack",
               title = paste("Stacked Bar Chart of", selected_variable, "by Stroke"),
               xaxis = list(title = "Stroke"),
               yaxis = list(title = "Count"),
               legend = list(title = list(text = selected_variable)))
      
      plot  # Display the plot
    })
    
    output$test_results <- renderUI({
      selected_variable <- input$selected_variable
      
      # Create a contingency table for stroke and the selected categorical variable
      contingency_table <- table(outlier_stroke_tb$stroke, outlier_stroke_tb[[selected_variable]])
      
      # Check if the contingency table has enough data for the chi-square test
      if (all(contingency_table > 0)) {
        # Run the chi-square test
        chi_square_result <- chisq.test(contingency_table)
        
        # Calculate Cramér's V to assess the strength of association
        cramers_v <- assocstats(contingency_table)$cramer
        
        # Display the test results
        test_results <- paste(
          "Chi-square P-value:", round(chi_square_result$p.value, 4), "<br>",
          "Cramér's V:", round(cramers_v, 4)
        )
      } else {
        test_results <- "Insufficient data for Chi-Square test"
      }
      
      # Display the test results in the app
      HTML(test_results)
    })
  }
)
```